import os
import re
import time
import random
from datetime import datetime, timedelta, timezone
from collections import defaultdict, deque
from dataclasses import dataclass

import requests
from dotenv import load_dotenv
from telegram import Update, ChatPermissions
from telegram.constants import ChatType
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CommandHandler,
    filters,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
WINDOW_SECONDS = 60
THRESHOLD = 3
BAN_SECONDS = 30

# –§—Ä–∞–∑—ã –¥–ª—è –ú—É—Ä–∫–∏ üê∂
MURKA_REPLIES = {
    "–±–æ—Ç": ["–ö—Ç–æ –∑–≤–∞–ª? ü§ñ", "–Ø —Ç—É—Ç, —è —Å–ª–µ–∂—É üëÄ", "–ù–µ –æ–±–∏–∂–∞–π –º–µ–Ω—è, —è —Å—Ç–∞—Ä–∞—é—Å—å üò¢", "–ë–æ—Ç –≤ –¥–µ–ª–µ, –±–∞–∑–∞—Ä —Ñ–∏–ª—å—Ç—Ä—É–π üí™"],
    "–±–∞—Ä—Å–∏–∫": ["–ö–∞–∂–µ—Ç—Å—è —ç—Ç–æ –∞–¥–º–∏–Ω..."],
    "–º—É—Ä–∞": ["–ì–∞–≤! üê∂ –¢—É—Ç –ú—É—Ä–∫–∞!", "–ú—É—Ä–∫–∞ –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º ‚ù§Ô∏è", "–ú—É—Ä–∫–∞ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —Ç–µ–±—è üëÄ"],
    "–º—É—Ä–æ—á–∫–∞": ["–ì–∞–≤! üê∂ –¢—É—Ç –ú—É—Ä–∫–∞!", "–ú—É—Ä–∫–∞ –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º ‚ù§Ô∏è", "–ú—É—Ä–∫–∞ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —Ç–µ–±—è üëÄ"],
    "–º—É—Ä–∏–∫": ["–ì–∞–≤! üê∂ –¢—É—Ç –ú—É—Ä–∫–∞!", "–ú—É—Ä–∫–∞ –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º ‚ù§Ô∏è", "–ú—É—Ä–∫–∞ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —Ç–µ–±—è üëÄ"],
    "–º—É—Ä–∫–∞": ["–ì–∞–≤! üê∂ –¢—É—Ç –ú—É—Ä–∫–∞!", "–ú—É—Ä–∫–∞ –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º ‚ù§Ô∏è", "–ú—É—Ä–∫–∞ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —Ç–µ–±—è üëÄ"],
    "–ø—Ä–∏–≤–µ—Ç": ["–ü—Ä–∏–≤–µ—Ç, —á–µ–ª–æ–≤–µ—á–µ–∫ üëã", "–î–∞—Ä–æ–≤–∞! –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?", "–û–ø–∞, –ø—Ä–∏–≤–µ—Ç–∏–∫–∏-–ø–∏—Å—Ç–æ–ª–µ—Ç–∏–∫–∏ üî´", "–ú—É—Ä–∫–∞ –º–∞—à–µ—Ç –ª–∞–ø–∫–æ–π üêæ"],
    "–∫–∞–∫ –¥–µ–ª–∞": ["–£ –º–µ–Ω—è –≤—Å–µ–≥–¥–∞ –æ—Ç–ª–∏—á–Ω–æ, —è –∂–µ –±–æ—Ç üòé", "–ñ–∏–≤—É, —Ä–∞–±–æ—Ç–∞—é 24/7 ü§ñ", "–õ—É—á—à–µ, —á–µ–º —É –ª—é–¥–µ–π, –Ω–µ –±–æ–ª–µ—é üòâ", "–ú—É—Ä–∫–∞ —Ä–∞–¥–æ—Å—Ç–Ω–æ –≤–∏–ª—èe—Ç —Ö–≤–æ—Å—Ç–∏–∫–æ–º üêï"],
    "–º—É—Ä–∫–∞ –∫—Ç–æ —Ç—ã": ["–Ø –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä, —Ç–≤–æ–π –Ω–æ—á–Ω–æ–π –∫–æ—à–º–∞—Ä üòà", "–Ø —Ç–≤–æ–π –¥—Ä—É–≥, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–µ–∑ –º–∞—Ç–æ–≤ üòÖ", "–Ø –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–∑—É–º. –ü–æ—á—Ç–∏ –°–∫–∞–π–Ω–µ—Ç.", "–Ø –ú—É—Ä–∫–∞, —Ç–≤–æ—è –æ—Ö—Ä–∞–Ω–Ω–∏—Ü–∞ üê∂"],
    "–≥—É–ª—è": ["–£—Ä–∞! üêï –ö—Ç–æ —Å–∫–∞–∑–∞–ª –≥—É–ª—è—Ç—å?!", "–ú—É—Ä–∫–∞ —É–∂–µ –±–µ–∂–∏—Ç –∑–∞ –ø–æ–≤–æ–¥–∫–æ–º! üêæ", "–ì—É–ª—è—Ç—å ‚Äî –º–æ—ë –ª—é–±–∏–º–æ–µ –∑–∞–Ω—è—Ç–∏–µ! üå≥","–∫—Ç–æ —Å–∫–∞–∑–∞–ª –≥—É–ª—è—Ç—å?"],
    "–¥–∞–π –ª–∞–ø—É": ["–í–æ—Ç –ª–∞–ø–∫–∞ üêæ", "–ú—É—Ä–∫–∞ –ø—Ä–æ—Ç—è–Ω—É–ª–∞ –ª–∞–ø—É üê∂", "–ù–∞, –¥–µ—Ä–∂–∏ –ª–∞–ø–∫—É ‚ù§Ô∏è"],
    "–∏–≥—Ä–∞—Ç—å": ["–ò–≥—Ä–∞—Ç—å?! –ú—É—Ä–∫–∞ –≥–æ—Ç–æ–≤–∞! üéâ", "–î–∞–≤–∞–π –∏–≥—Ä–∞—Ç—å, —è –ø—Ä–∏–Ω–µ—Å–ª–∞ –º—è—á–∏–∫ ‚öΩ", "–ò–≥—Ä—ã ‚Äî —ç—Ç–æ –º–æ—ë –≤—Å—ë üêï","‚öΩÔ∏è","üèÄ"],
    "–º—è—á": ["‚öΩ –î–µ—Ä–∂–∏ –º—è—á–∏–∫!", "–ú—É—Ä–∫–∞ –ø—Ä–∏–Ω–µ—Å–ª–∞ —Ç–µ–±–µ –º—è—á üê∂", "–î–∞–π –º—è—á–∏–∫, –¥–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º! üéæ","‚öΩÔ∏è","üèÄ"],
    "–≤–∫—É—Å–Ω—è—à–∫": ["–ú—É—Ä–∫–∞ —Ö–æ—á–µ—Ç –≤–∫—É—Å–Ω—è—à–∫—É üòã", "–ê –º–æ–∂–Ω–æ –∫–æ—Ç–ª–µ—Ç–∫—É? üçñ", "–£–≥–æ—Å—Ç–∏ –ú—É—Ä–∫—É —á–µ–º-–Ω–∏–±—É–¥—å –≤–∫—É—Å–Ω—ã–º üêæ"],
    "–ª—é–±–∏—à—å": ["–ú—É—Ä–∫–∞ –ª—é–±–∏—Ç –≤—Å–µ—Ö —Ö–æ—Ä–æ—à–∏—Ö –ª—é–¥–µ–π ‚ù§Ô∏è", "–ö–æ–Ω–µ—á–Ω–æ —Ç–µ–±—è! üê∂", "–ú—É—Ä–∫–∞ –ª—é–±–∏—Ç –≤–∫—É—Å–Ω—è—à–∫–∏ –∏ –≥—É–ª—è—Ç—å üå≥"],
    "–ø–µ—Å–Ω—è": ["Aerosmith - What It Takes üé∂ —É—É—Éüê∫üíÉ", "–ú—É—Ä–∫–∞ –Ω–∞–ø–µ–≤–∞–µ—Ç –ª—é–±–∏–º—É—é –ø–µ—Å–Ω—é üé§"],
    "–º—É—Ä–∫–∞ –∫–∞–∫ –¥–µ–ª–∞": ["–ì–∞–≤! –£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ üêæ", "–õ—É—á—à–µ –≤—Å–µ—Ö! –í–µ–¥—å —è —Å–æ–±–∞—á–∫–∞ –ú—É—Ä–∫–∞ üê∂üíñ"],
    "–º—É—Ä–∫–∞ –∫–æ–≥–æ —Ç—ã –ª—é–±–∏—à—å": ["–ö–æ–Ω–µ—á–Ω–æ –∂–µ —Ç–µ–±—è, –º–æ–π —á–µ–ª–æ–≤–µ–∫ üêæ‚ù§Ô∏è", "–õ—é–±–ª—é –≤—Å–µ—Ö, –∫—Ç–æ –¥–∞—ë—Ç –≤–∫—É—Å–Ω—è—à–∫–∏ üçñ"],
    "–º—É—Ä–∫–∞ —Ö–æ—á–µ—à—å –≤–∫—É—Å–Ω—è—à–∫–∏": ["–ì–∞–≤-–≥–∞–≤! –î–∞–≤–∞–π —Å–∫–æ—Ä–µ–µ! ü¶¥", "–ö–æ—Ç–ª–µ—Ç–∫—É? –£—É—É—É, –¥–∞–≤–∞–π! üçñ"],
    "–º—É—Ä–∫–∞ –∫–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –ø–µ—Å–Ω—è": ["audio"],
    "–∫–æ—Ç–ª–µ—Ç": ["–ö–æ—Ç–ª–µ—Ç–∫–∞? –î–∞–π –¥–≤–µ! üçñüêæ", "–Ø –∑–∞ –∫–æ—Ç–ª–µ—Ç—É –≤—Å—ë —Å–¥–µ–ª–∞—é üêï"],
    "–¥–∞–π –º—è—á": ["‚öΩ –í–æ—Ç —Ç–≤–æ–π –º—è—á–∏–∫, –∫–∏–¥–∞–π –æ–±—Ä–∞—Ç–Ω–æ!", "‚öΩ‚öΩ‚öΩ –ì–∞–≤-–≥–∞–≤, –∏–≥—Ä–∞–µ–º?"],
    "–ø—Ä–∏–Ω–µ—Å–∏ –º—è—á": ["‚öΩ –Ø –ø—Ä–∏–Ω–µ—Å–ª–∞! –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑ –∫–∏–Ω—å!", "‚öΩ –ù–∞—à–ª–∞ –º—è—á–∏–∫, –¥–µ—Ä–∂–∏!"],
    "–º—É—Ä–∫–∞ –æ—Ö—Ä–∞–Ω—è–π": ["–ì—Ä—Ä—Ä! –Ø –æ—Ö—Ä–∞–Ω—è—é —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é üõ°Ô∏èüêï", "–ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–π–¥—ë—Ç! üê∫"],
    "–æ—Ö—Ä–∞–Ω": ["–ì—Ä—Ä—Ä! –Ø –æ—Ö—Ä–∞–Ω—è—é —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é üõ°Ô∏èüêï", "–ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–π–¥—ë—Ç! üê∫"],
    "–º—É—Ä–∫–∞ –æ—Ö—Ä–∞–Ω—è–µ—à—å": ["–ö–æ–Ω–µ—á–Ω–æ, —è –Ω–∞ –ø–æ—Å—Ç—É! üêæüëÆ‚Äç‚ôÄÔ∏è", "–Ø –≤—Å–µ–≥–¥–∞ –æ—Ö—Ä–∞–Ω—è—é —Å–≤–æ–π —á–∞—Ç üõ°Ô∏è"],
    "–º—É—Ä–∫–∞ –¥–∞–π –ª–∞–ø—É": ["üêæ –í–æ—Ç —Ç–µ–±–µ –ª–∞–ø–∫–∞!", "–õ–∞–ø–∫—É –¥–∞—é, —Ç–æ–ª—å–∫–æ –≤–∫—É—Å–Ω—è—à–∫—É –Ω–µ –∑–∞–±—É–¥—å üçñ"],
    "–º—É—Ä–∫–∞ –¥–∞–π –ø—Ä–∞–≤—É—é –ª–∞–ø—É": ["üêæ –í–æ—Ç –ø—Ä–∞–≤–∞—è –ª–∞–ø–∫–∞!"],
    "–º—É—Ä–∫–∞ –¥–∞–π –ª–µ–≤—É—é –ª–∞–ø–∫—É": ["üêæ –í–æ—Ç –ª–µ–≤–∞—è –ª–∞–ø–∫–∞!"],
    "—Å–∫—É—á–Ω": ["–î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º —Å –º—è—á–∏–∫–æ–º ‚öΩ", "–•–æ—á–µ—à—å, –ø–æ–∫–∞–∂—É —Ç—Ä—é–∫? üê∂"],
    "–º—É—Ä–∫–∞ –∑–∞—Å–∫—É—á–∞–ª–∞": ["–ì–∞–≤! –î–∞–≤–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å —Å–¥–µ–ª–∞–µ–º –≤–º–µ—Å—Ç–µ üêæ"],
    "–º—É—Ä–∫–∞ —Å–ø–æ–π –ø–µ—Å–Ω—é": ["audio"],
    "–º—É—Ä–∫–∞ –ø–æ–π": ["audio"],
    # –¥–æ–±–∞–≤–∏–º "–º—É—Ä–∫–∞ –ø–µ—Å–Ω—è" –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∞—É–¥–∏–æ-—Ç—Ä–∏–≥–≥–µ—Ä
    "–º—É—Ä–∫–∞ –ø–µ—Å–Ω—è": ["audio"],
    "–º—É—Ä–∫–∞ –∑–ª–∞—è": ["–ì—Ä—Ä—Ä—Ä—Ä—Ä üòàüêï", "–õ—É—á—à–µ –Ω–µ —à—É—Ç–∏ —Å–æ –º–Ω–æ–π! üê∫"],
    "–º—É—Ä–∫–∞ –∑–ª–æ–π": ["–Ø –º–æ–≥—É –±—ã—Ç—å —Å—Ç—Ä–∞—à–Ω–æ–π! üêæüëπ", "–ì–∞–≤-–≥–∞–≤! –ù–µ –∑–ª–∏ –º–µ–Ω—è üêï"],
    "–∫–∏–Ω—å –∫—É–±–∏–∫": ["üé≤"],
    "–∫–∏–Ω—å –∫–æ—Å—Ç—å": ["üé≤"],
    "–¥–∞–≤–∞–π –±–æ–ª—Ç–∞—Ç—å": ["–ì–∞–≤! –î–∞–≤–∞–π, –Ω–æ —è –µ—â–µ —É—á—É—Å—å —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å –∫–∞–∫ –≤—ã!"]
}

# –†–µ–≥–µ–∫—Å—ã –¥–ª—è –∞—É–¥–∏–æ ‚Äì –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ
AUDIO_REGEXES = [
    re.compile(r"\b–º—É—Ä–∫–∞\s+–ø–æ–π\b"),
    re.compile(r"\b–º—É—Ä–∫–∞\s+—Å–ø–æ–π( –ø–µ—Å–Ω—é)?\b"),
    re.compile(r"\b–º—É—Ä–∫–∞\s+–ø–µ—Å–Ω—è\b"),
    re.compile(r"\b–º—É—Ä–∫–∞[, ]+–∫–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –ø–µ—Å–Ω—è\b"),
]

BAD_PATTERNS = [
    r"\b—Ö[—Éy][–π–∏–µ—è—ë]\w*", r"\b–ø[–∏–µ]–∑–¥[–∞—ã–æ]*\w*", r"\b[–µ—ë]–±\w*", r"\b–±–ª[—è–µ]–¥[—å–π]*\w*", r"\b—Å—É–∫[–∞–∏–æ]*\w*",
    r"\b–º—É–¥[–∞–æ]–∫\w*", r"\b–ø–∏–¥[–æa]—Ä\w*", r"\b–¥—É—Ä–∞\w*", r"\b–¥—É—Ä–∞–∫\w*", r"\b—Ç—É–ø(–æ–π|–∞—è|—ã–µ|—ã–µ|–æ—Ä—ã–ª—ã–π)\b",
    r"\b–∂–æ–ø\w*", r"\b–ø–∏—Å—å–∫\w*", r"\b—á—É—à–∫–∞\b", r"\b—á—É—Ö–∞–Ω\w*", r"\b–µ–±–∞–Ω–∞—à–∫\w*", r"\b—Å–º–æ\b",
    r"\b–º—Ä–∞–∑—å\b", r"\b–¥–µ–±–∏–ª(–∫–∞)?\b", r"\b–¥–∏–±–∏–ª(–∫–∞)?\b", r"\b—É—Ä–æ–¥(–∫–∞|–∏–Ω–∞)?\b", r"\b–¥–∞—É–Ω\b",
    r"\b–¥–æ–ª–±–æ–µ–±\w*", r"\b–∫[–∞–æ]–∑–µ–ª\b", r"\b–ª–æ—Ö(–∏)?\b", r"\b–ª–æ—à–∞—Ä\w*", r"\b—á–º–æ–Ω—è\b", r"\b—á–º–æ\b",
    r"\b–≥–æ–≤–Ω–æ–µ–¥(—ã|–∫–∞)?\b", r"\b–≥–Ω–∏–¥–∞\b",
]
BAD_REGEXES = [re.compile(p, re.IGNORECASE) for p in BAD_PATTERNS]

violations = defaultdict(lambda: deque(maxlen=50))

@dataclass
class UserState:
    last_warn_at: float = 0.0

state = defaultdict(UserState)

# ---------- –õ–æ–≥–∏–∫–∞ ----------
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    chat = update.effective_chat
    user = update.effective_user

    if not msg or not user or not msg.text:
        return

    text = msg.text.lower()

    # 1) –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü-—Ñ—Ä–∞–∑—ã –¥–ª—è –∞—É–¥–∏–æ
    for rx in AUDIO_REGEXES:
        if rx.search(text):
            try:
                with open("song.mp3", "rb") as audio:
                    await msg.reply_audio(audio)
            except Exception:
                await msg.reply_text("–û–π, –ø–µ—Å–Ω—é –ø–æ—Ç–µ—Ä—è–ª–∞ üòø")
            return

    # 2) –ó–∞—Ç–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã ‚Äî –æ—Ç –¥–ª–∏–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π –∫ –∫–æ—Ä–æ—Ç–∫–∏–º
    for key in sorted(MURKA_REPLIES.keys(), key=len, reverse=True):
        answers = MURKA_REPLIES[key]
        if re.search(rf"\b{re.escape(key)}\b", text):
            if "audio" in answers:
                try:
                    with open("song.mp3", "rb") as audio:
                        await msg.reply_audio(audio)
                except Exception:
                    await msg.reply_text("–û–π, –ø–µ—Å–Ω—é –ø–æ—Ç–µ—Ä—è–ª–∞ üòø")
            else:
                await msg.reply_text(random.choice(answers))
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞
    if not any(r.search(text) for r in BAD_REGEXES):
        return

    key = (chat.id, user.id)
    now = time.time()
    q = violations[key]

    while q and now - q[0] > WINDOW_SECONDS:
        q.popleft()
    q.append(now)
    strikes = len(q)

    st = state[key]
    name = user.mention_html()

    if chat.type == ChatType.PRIVATE:
        if now - st.last_warn_at > 15:
            await msg.reply_html(f"‚ö†Ô∏è {name}, –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ —Å –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏.")
            st.last_warn_at = now
        return

    if strikes < THRESHOLD:
        if now - st.last_warn_at > 15:
            warning_text = f"‚ö†Ô∏è {name}, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ({strikes}/{THRESHOLD}) –∑–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è."
            await msg.reply_html(warning_text)
            st.last_warn_at = now
        return

    try:
        me = await context.bot.get_chat_member(chat.id, context.bot.id)
        if me.can_restrict_members:
            until = datetime.now(timezone.utc) + timedelta(seconds=BAN_SECONDS)
            await context.bot.ban_chat_member(chat.id, user.id, until_date=until)
            await msg.reply_html(f"‚õî {name} –ø–æ–ª—É—á–∏–ª –±–∞–Ω –Ω–∞ {BAN_SECONDS} —Å–µ–∫—É–Ω–¥!")
        q.clear()
        st.last_warn_at = now
    except Exception as e:
        await msg.reply_html(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ì–∞–≤-–≥–∞–≤! üê∂ –Ø –ú—É—Ä–∫–∞ ‚Äî —Ç–≤–æ–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä!\n"
        f"–ü–æ—Å–ª–µ {THRESHOLD} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π ‚Äî –±–∞–Ω –Ω–∞ {BAN_SECONDS} —Å–µ–∫—É–Ω–¥.\n"
        "–ê –µ—â—ë —è –ª—é–±–ª—é –≥—É–ª—è—Ç—å, –≤–∫—É—Å–Ω—è—à–∫–∏ –∏ –∏–≥—Ä–∞—Ç—å —Å –º—è—á–∏–∫–æ–º ‚öΩ"
    )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n- –ü–æ—Ä–æ–≥: {THRESHOLD} –Ω–∞—Ä—É—à–µ–Ω–∏–π –∑–∞ {WINDOW_SECONDS} —Å–µ–∫—É–Ω–¥\n- –ù–∞–∫–∞–∑–∞–Ω–∏–µ: {BAN_SECONDS} —Å–µ–∫—É–Ω–¥"
    )

# ---------- –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ----------
async def remind(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remind <–º–∏–Ω—É—Ç—ã> <—Ç–µ–∫—Å—Ç>")
        return
    try:
        minutes = int(context.args[0])
        text = " ".join(context.args[1:])
    except ValueError:
        await update.message.reply_text("–£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç —á–∏—Å–ª–æ–º.")
        return

    await update.message.reply_text(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω: {text}")
    await context.job_queue.run_once(
        lambda ctx: ctx.bot.send_message(update.effective_chat.id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}"),
        when=minutes * 60,
        chat_id=update.effective_chat.id,
        name=str(update.effective_chat.id),
    )

# ---------- –ó–∞–ø—É—Å–∫ ----------
def main():
    load_dotenv()
    token = os.getenv("BOT_TOKEN")
    port = int(os.getenv("PORT", 8443))
    webhook_url = os.getenv("WEBHOOK_URL")

    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("remind", remind))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path="webhook",
        webhook_url=f"{webhook_url}/webhook",
    )

if __name__ == "__main__":
    main()