import os
import re
import time
import random
from datetime import datetime, timedelta, timezone
from collections import defaultdict, deque
from dataclasses import dataclass

from dotenv import load_dotenv
from telegram import Update, ChatPermissions
from telegram.constants import ChatType
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CommandHandler,
    filters,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
WINDOW_SECONDS = 60    # –æ–∫–Ω–æ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π
THRESHOLD = 3          # —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –º–æ–∂–Ω–æ –Ω–∞—Ä—É—à–∏—Ç—å
MUTE_SECONDS = 30      # –Ω–∞–∫–∞–∑–∞–Ω–∏–µ (–±–∞–Ω/–º—É—Ç) –Ω–∞ 30 —Å–µ–∫—É–Ω–¥

# –ó–∞–±–∞–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ + "—Å–æ–±–∞—á—å–∏")
FUNNY_REPLIES = {
    "–±–æ—Ç": [
        "–ö—Ç–æ –∑–≤–∞–ª? ü§ñ",
        "–Ø —Ç—É—Ç, —è —Å–ª–µ–∂—É üëÄ",
        "–ù–µ –æ–±–∏–∂–∞–π –º–µ–Ω—è, —è —Å—Ç–∞—Ä–∞—é—Å—å üò¢",
        "–ë–æ—Ç –≤ –¥–µ–ª–µ, –±–∞–∑–∞—Ä —Ñ–∏–ª—å—Ç—Ä—É–π üí™",
    ],
    "–ø—Ä–∏–≤–µ—Ç": [
        "–ü—Ä–∏–≤–µ—Ç, —á–µ–ª–æ–≤–µ—á–µ–∫ üëã",
        "–î–∞—Ä–æ–≤–∞! –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
        "–û–ø–∞, –ø—Ä–∏–≤–µ—Ç–∏–∫–∏-–ø–∏—Å—Ç–æ–ª–µ—Ç–∏–∫–∏ üî´",
    ],
    "–∫–∞–∫ –¥–µ–ª–∞": [
        "–£ –º–µ–Ω—è –≤—Å–µ–≥–¥–∞ –æ—Ç–ª–∏—á–Ω–æ, —è –∂–µ –±–æ—Ç üòé",
        "–ñ–∏–≤—É, —Ä–∞–±–æ—Ç–∞—é 24/7 ü§ñ",
        "–õ—É—á—à–µ, —á–µ–º —É –ª—é–¥–µ–π, –Ω–µ –±–æ–ª–µ—é üòâ",
    ],
    "–∫—Ç–æ —Ç—ã": [
        "–Ø –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä, —Ç–≤–æ–π –Ω–æ—á–Ω–æ–π –∫–æ—à–º–∞—Ä üòà",
        "–Ø —Ç–≤–æ–π –¥—Ä—É–≥, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–µ–∑ –º–∞—Ç–æ–≤ üòÖ",
        "–Ø –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–∑—É–º. –ü–æ—á—Ç–∏ –°–∫–∞–π–Ω–µ—Ç.",
    ],

    # --- –ù–æ–≤—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã: –º–∞–ª–µ–Ω—å–∫–∞—è —Å–æ–±–∞—á–∫–∞ ---
    "–≥–∞–≤": [
        "–≥–∞–≤-–≥–∞–≤! –º–∞–ª–µ–Ω—å–∫–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–∞ —Å—Ç—Ä–∞–∂–µ! üê∂",
        "—Ç—è–≤! –∫—Ç–æ —Ç—É—Ç —Ä—É–≥–∞–µ—Ç—Å—è? —è –≤—Å–µ —Å–ª—ã—à—É üëÇüêæ",
        "–Ω–æ—Å–∏–∫ –∑–∞–Ω—é—Ö–∞–ª —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å‚Ä¶ —Ñ—ã—Ä-—Ñ—ã—Ä! üö´üê∂",
        "–µ—Å–ª–∏ –±—É–¥–µ—à—å —Ö–æ—Ä–æ—à–∏–º ‚Äî –¥–∞–º –ª–∞–ø–∫—É! üêæ",
    ],
    "—Ç—è–≤": [
        "—Ç—è–≤-—Ç—è–≤! –ø–æ—Ä—è–¥–æ–∫ –≤ —á–∞—Ç–µ ‚Äî –º–æ—è –∫–æ—Å—Ç–æ—á–∫–∞! ü¶¥",
        "–º–µ–ª–∫–∏–π, –Ω–æ —Å—Ç—Ä–æ–≥–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–∞ –ø–æ—Å—Ç—É üê∂",
        "—Ç—É—Ç –Ω–µ–ª—å–∑—è —Ä—É–≥–∞—Ç—å—Å—è, –ø–æ–Ω—è–ª? —Ç—è–≤! üò†üêæ",
    ],
    "—Å–æ–±–∞—á–∫–∞": [
        "—è –º–∞–ª–µ–Ω—å–∫–∞—è –æ—Ö—Ä–∞–Ω–∞ —á–∞—Ç–∞, –≥–∞–≤! üê∂",
        "–ª—è–≥ —Ä—è–¥–æ–º –∏ –Ω–µ —Ä—É–≥–∞–π—Å—è ‚Äî –±—É–¥–µ—Ç –≤–∫—É—Å–Ω—è—à–∫–∞ üçñ",
        "–ª–∞–ø—ã –∑–∞–Ω—è—Ç—ã –¥–µ–ª–æ–º, —Å–ª–µ–¥–∏–º –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º üêæ",
    ],
    "–ø–µ—Å–∏–∫": [
        "–ø—ë—Å–∏–∫ —Ç—É—Ç! –Ω–µ –∫—É—Å–∞—é—Å—å, –µ—Å–ª–∏ –±–µ–∑ –º–∞—Ç–æ–≤ üê∂",
        "—Ç—è–≤-—Ç—è–≤, –¥–µ—Ä–∂–∏–º —á–∞—Ç –≤ —á–∏—Å—Ç–æ—Ç–µ! üßº",
        "–Ω—é—Ö –Ω–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–∫–∞—á–∞–Ω –Ω–∞ 100% üëÉ‚ú®",
    ],
    "–ø—ë—Å–∏–∫": [
        "–ø—ë—Å–∏–∫ —Ç—É—Ç! –Ω–µ –∫—É—Å–∞—é—Å—å, –µ—Å–ª–∏ –±–µ–∑ –º–∞—Ç–æ–≤ üê∂",
        "—Ç—è–≤-—Ç—è–≤, –¥–µ—Ä–∂–∏–º —á–∞—Ç –≤ —á–∏—Å—Ç–æ—Ç–µ! üßº",
        "–Ω—é—Ö –Ω–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–∫–∞—á–∞–Ω –Ω–∞ 100% üëÉ‚ú®",
    ],
    "—â–µ–Ω–æ–∫": [
        "—â–µ–Ω–æ—á–µ–∫-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –¥–µ–∂—É—Ä–∏—Ç! üê∂",
        "–Ω–µ —Ä—É–≥–∞–π—Å—è, –∞ —Ç–æ –ª–∏—à—É –∫–æ—Å—Ç–æ—á–∫–∏! ü¶¥",
        "–µ—Å–ª–∏ —á—Ç–æ ‚Äî –¥–∞–º –ª–∞–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ üêæ",
    ],
    "–¥–∞–π –ª–∞–ø—É": [
        "–¥–µ—Ä–∂–∏ –ª–∞–ø–∫—É! ü§ùüêæ —Ç–æ–ª—å–∫–æ –±–µ–∑ –≥—Ä—É–±–æ—Å—Ç–µ–π!",
        "–ª–∞–ø–∫–∞ –ø–æ–∂–∞—Ç–∞ ‚Äî –¥–∞–≤–∞–π –∂–∏—Ç—å –¥—Ä—É–∂–Ω–æ üê∂",
    ],
    "–∫–æ—Å—Ç–æ—á–∫–∞": [
        "–∫–æ—Å—Ç–æ—á–∫–∞ –≤—ã–¥–∞—ë—Ç—Å—è –∑–∞ –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å ü¶¥‚ú®",
        "–∫–æ—Å—Ç–æ—á–∫—É –ø–æ–ª—É—á–∞—é—Ç —Ç–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–±—è—Ç–∞! üê∂",
    ],
}

# –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
BAD_PATTERNS = [
    r"\b—Ö[—Éy][–π–∏–µ—è—ë]\w*",
    r"\b–ø[–∏–µ]–∑–¥[–∞—ã–æ]*\w*",
    r"\b[–µ—ë]–±\w*",
    r"\b–±–ª[—è–µ]–¥[—å–π]*\w*",
    r"\b—Å—É–∫[–∞–∏–æ]*\w*",
    r"\b–º—É–¥[–∞–æ]–∫\w*",
    r"\b–ø–∏–¥[–æa]—Ä\w*",
    r"\b–¥—É—Ä–∞\w*",
    r"\b–¥—É—Ä–∞–∫\w*",
    r"\b—Ç—É–ø(–æ–π|–∞—è|—ã–µ|—ã–µ)\b",
    r"\b–∂–æ–ø\w*",
    r"\b–ø–∏—Å—å–∫\w*",

    # --- –†–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ ---
    r"\b—É—Ä–æ–¥\w*",
    r"\b–∏–¥–∏–æ—Ç\w*",
    r"\b–∫—Ä–µ—Ç–∏–Ω\w*",
    r"\b–∏–º–±–µ—Ü–∏–ª\w*",
    r"\b–Ω–µ–¥–æ—É–º\w*",
    r"\b–¥[–æ–∞]–ª–±[–∞–æ][–µ—ë]–±\w*",
    r"\b–µ–±–ª–∞–Ω\w*",
    r"\b—É[–µ—ë]–±–∏—â\w*",
    r"\b–Ω–∞—Ö(–µ—Ä|—Ä–µ–Ω|—É–π)\w*",
    r"\b–≥–∞–Ω–¥–æ–Ω\w*",
    r"\b—á–º[–æ—ë]\w*",
    r"\b–º—Ä–∞–∑[—å–∏]\w*",
    r"\b—Å–≤–æ–ª–æ—á\w*",
    r"\b—Ç–≤–∞—Ä[—å–∏]\w*",
    r"\b—Å–∫–æ—Ç–∏–Ω\w*",
    r"\b—É–±–ª—é–¥\w*",
    r"\b–≥–Ω–∏–¥\w*",
    r"\b–≥–æ–≤–Ω\w*",
    r"\b–¥–µ—Ä—å–º\w*",
    r"\b—à–ª—é—Ö\w*",
    r"\b–ø—Ä–æ—Å—Ç–∏—Ç—É—Ç\w*",
    r"\b–∫—É—Ä–≤\w*",
    r"\b–ø–µ—Ç—É—Ö\w*",
    r"\b—Å—Å—ã–∫—É–Ω\w*",
    r"\b–æ–±–æ—Å—Ä–∞–Ω\w*",
    r"\b–ª–æ—Ö\w*",

    # --- –ù–æ–≤—ã–µ –ø–æ —Ç–≤–æ–µ–º—É —Å–ø–∏—Å–∫—É ---
    r"\b–¥–µ–±–∏–ª–∫\w*",
    r"\b–∫–æ–∑[–∞–µ—ë]\w*",
    r"\b–¥–µ–±–∏–ª\w*",
    r"\b—Ç—É–ø–æ—Ä—ã–ª\w*",
    r"\b–µ–±–∞–Ω–∞—à–∫\w*",
    r"\b–µ–±–∞–Ω—ã–π\w*",
    r"\b—É—Ä–æ–¥\w*",
    r"\b—Å–∫–æ—Ç–∏–Ω–∞\w*",
    r"\b–≥–Ω–∏–¥–∞\w*",
    r"\b–º—Ä–∞–∑—å\w*",
    r"\b–±–ª—è—Ç—å\w*",
    r"\b–ª–æ—Ö\w*",
    r"\b–ª–æ—Ö–∏\w*",
    r"\b–¥–µ–±–∏–∫\w*",
    r"\b—á–º–æ–Ω[—è–∏]\w*",
    r"\b—Å—É—á–∫\w*",
    r"\b—Å—É–∫–∞\w*",
    r"\b–≥–æ–≤–Ω–æ–µ–¥\w*",
    r"\b–≥–æ–≤–Ω–æ–µ–¥–∫\w*",
    r"\b—á—É—à–∫\w*",
    r"\b—á—É—Ö–∞–Ω\w*",
]
BAD_REGEXES = [re.compile(p, re.IGNORECASE) for p in BAD_PATTERNS]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π
violations = defaultdict(lambda: deque(maxlen=50))

@dataclass
class UserState:
    last_warn_at: float = 0.0

state = defaultdict(UserState)


# ---------- –õ–æ–≥–∏–∫–∞ ----------
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    chat = update.effective_chat
    user = update.effective_user

    if not msg or not user or not msg.text:
        return

    text = msg.text.lower()

    # --- –ó–∞–±–∞–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã ---
    for key, answers in FUNNY_REPLIES.items():
        if key in text:
            await msg.reply_text(random.choice(answers))
            return

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞ ---
    if not any(r.search(text) for r in BAD_REGEXES):
        return

    key = (chat.id, user.id)
    now = time.time()
    q = violations[key]

    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
    while q and now - q[0] > WINDOW_SECONDS:
        q.popleft()
    q.append(now)
    strikes = len(q)

    st = state[key]
    name = user.mention_html()

    admin_chat_id = os.getenv("ADMIN_LOG_CHAT_ID")

    # –õ–° (–ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
    if chat.type == ChatType.PRIVATE:
        if now - st.last_warn_at > 15:
            await msg.reply_html(f"‚ö†Ô∏è {name}, –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ —Å –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏.")
            st.last_warn_at = now
        return

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    if strikes < THRESHOLD:
        if now - st.last_warn_at > 15:
            warning_text = f"‚ö†Ô∏è {name}, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ({strikes}/{THRESHOLD}) –∑–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è."
            await msg.reply_html(warning_text)
            if admin_chat_id:
                await context.bot.send_message(
                    chat_id=admin_chat_id,
                    text=f"üëÆ –í —á–∞—Ç–µ {chat.title} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ({strikes}/{THRESHOLD}).",
                )
            st.last_warn_at = now
        return

    # –ù–∞–∫–∞–∑–∞–Ω–∏–µ
    try:
        me = await context.bot.get_chat_member(chat.id, context.bot.id)

        if me.status in ("administrator", "creator") and getattr(me, "can_restrict_members", True):
            until = datetime.now(timezone.utc) + timedelta(seconds=MUTE_SECONDS)
            perms = ChatPermissions(can_send_messages=False)
            await context.bot.restrict_chat_member(
                chat.id,
                user.id,
                permissions=perms,
                until_date=until,
            )
            mute_text = f"‚õî {name} –ø–æ–ª—É—á–∏–ª –±–∞–Ω –Ω–∞ {MUTE_SECONDS} —Å–µ–∫—É–Ω–¥!"
            await msg.reply_html(mute_text)
            if admin_chat_id:
                await context.bot.send_message(
                    chat_id=admin_chat_id,
                    text=f"üö´ –í —á–∞—Ç–µ {chat.title} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –ø–æ–ª—É—á–∏–ª –ë–ê–ù –Ω–∞ {MUTE_SECONDS} —Å–µ–∫—É–Ω–¥.",
                )
        else:
            funny_text = f"‚õî {name}, –º–Ω–µ –Ω–µ –¥–∞–ª–∏ –ø—Ä–∞–≤–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É üò¢"
            await msg.reply_html(funny_text)
            if admin_chat_id:
                await context.bot.send_message(
                    chat_id=admin_chat_id,
                    text=f"‚ö†Ô∏è –í —á–∞—Ç–µ {chat.title} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –∏–∑–±–µ–∂–∞–ª –Ω–∞–∫–∞–∑–∞–Ω–∏—è –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–∞–≤ —É –±–æ—Ç–∞.",
                )
        q.clear()
        st.last_warn_at = now
    except Exception as e:
        await msg.reply_html(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞–∫–∞–∑–∞—Ç—å: {e}")


# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç üëã –Ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä-–±–æ—Ç!\n"
        "–Ø —Å–ª–µ–∂—É –∑–∞ —á–∞—Ç–æ–º –∏ –≤—ã–¥–∞—é –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∑–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è.\n"
        f"–ü–æ—Å–ª–µ {THRESHOLD} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π ‚Äî –±–∞–Ω –Ω–∞ {MUTE_SECONDS} —Å–µ–∫—É–Ω–¥.\n"
        "–ê –µ—â—ë —É –º–µ–Ω—è –µ—Å—Ç—å —Å–º–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã üòâ"
    )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"- –ü–æ—Ä–æ–≥: {THRESHOLD} –Ω–∞—Ä—É—à–µ–Ω–∏–π –∑–∞ {WINDOW_SECONDS} —Å–µ–∫—É–Ω–¥\n"
        f"- –ù–∞–∫–∞–∑–∞–Ω–∏–µ: {MUTE_SECONDS} —Å–µ–∫—É–Ω–¥"
    )


# ---------- –ó–∞–ø—É—Å–∫ ----------
def main():
    load_dotenv()
    token = os.getenv("BOT_TOKEN")
    port = int(os.getenv("PORT", 8443))
    webhook_url = os.getenv("WEBHOOK_URL")  # –ø—Ä–∏–º–µ—Ä: https://tg-anti-swear-bot.onrender.com

    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path="webhook",
        webhook_url=f"{webhook_url}/webhook",
    )


if __name__ == "__main__":
    main()
