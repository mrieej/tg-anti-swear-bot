import logging
import os
import re
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

TOKEN = os.getenv("TELEGRAM_TOKEN")

# --- –ê–Ω—Ç–∏-–º–∞—Ç üõë ---
bad_words = ["–¥—É—Ä–∞–∫", "–ª–æ—Ö", "—Ç—É–ø–æ–π", "—Å—É–∫–∞", "–±–ª—è—Ç—å", "—Ö—É–π", "–ø–∏–¥–æ—Ä", "–µ–±–∞—Ç—å"]
warned_users = {}

# --- –†–µ–∞–∫—Ü–∏–∏ –ú—É—Ä–∫–∏ üê∂ ---
murka_commands = {
    "–¥–∞–π –ª–∞–ø—É": "üêæ –ú—É—Ä–∫–∞ –¥–∞–ª–∞ —Ç–µ–±–µ –ª–∞–ø—É!",
    "–ª–∞–ø—É": "üêæ –í–æ—Ç –ª–∞–ø–∫–∞!",
    "–¥–∞–π –ª–µ–≤—É—é –ª–∞–ø—É": "üêæ –ú—É—Ä–∫–∞ –ø—Ä–æ—Ç—è–Ω—É–ª–∞ –ª–µ–≤—É—é –ª–∞–ø–∫—É!",
    "—Ö–æ—á–µ—à—å –≥—É–ª—è—Ç—å": "üêï –ú—É—Ä–∫–∞ —É–∂–µ —É –¥–≤–µ—Ä–∏, –≥–æ—Ç–æ–≤–∞ –≥—É–ª—è—Ç—å!",
    "–≥—É–ª—è—Ç—å": "üêæ –ü–æ—à–ª–∏ –≥—É–ª—è—Ç—å!",
    "–¥–∞–≤–∞–π –∏–≥—Ä–∞—Ç—å": "üéæ –ú—É—Ä–∫–∞ —Ä–∞–¥–æ—Å—Ç–Ω–æ –ø—Ä—ã–≥–∞–µ—Ç –∏ —Ö–æ—á–µ—Ç –∏–≥—Ä–∞—Ç—å!",
    "–∏–≥—Ä–∞—Ç—å": "‚öΩ –ü—Ä–∏–Ω–µ—Å–∏ –º—è—á, –∏ –±—É–¥–µ–º –∏–≥—Ä–∞—Ç—å!",
    "–ø—Ä–∏–Ω–µ—Å–∏ –º—è—á": "‚öΩ –í–æ—Ç —Ç–≤–æ–π –º—è—á–∏–∫!",
    "–¥–∞–π –º—è—á": "‚öΩ –î–µ—Ä–∂–∏ –º—è—á–∏–∫!",
    "–∫–∞–∫ –¥–µ–ª–∞": "üê∂ –£ –ú—É—Ä–∫–∏ –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ!",
    "–∫–æ–≥–æ —Ç—ã –ª—é–±–∏—à—å": "üêæ –ö–æ–Ω–µ—á–Ω–æ —Ç–µ–±—è ‚ù§Ô∏è",
    "—Ö–æ—á–µ—à—å –≤–∫—É—Å–Ω—è—à–∫–∏": "üçñ –ú—É—Ä–∫–∞ –≤—Å–µ–≥–¥–∞ –∑–∞ –≤–∫—É—Å–Ω—è—à–∫—É!",
    "–∫–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –ø–µ—Å–Ω—è": "üé∂ Aerosmith - What it takes! —É—É—Éüê∫üíÉ",
}

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    user_id = msg.from_user.id
    text = msg.text.lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç
    if any(bad in text for bad in bad_words):
        if user_id not in warned_users:
            warned_users[user_id] = 1
            await msg.reply_text("‚ö†Ô∏è –ú—É—Ä–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç: –Ω–µ —Ä—É–≥–∞–π—Å—è!")
        else:
            await msg.reply_text("üö´ –¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –º–∞—Ç!")
            try:
                await context.bot.ban_chat_member(msg.chat.id, user_id)
            except Exception as e:
                await msg.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å: {e}")
        return

    # --- –ö–æ–º–∞–Ω–¥—ã –ú—É—Ä–∫–∏ üê∂ ---
    for key, reply in murka_commands.items():
        if key in text or text.startswith("–º—É—Ä–∫–∞ " + key):
            await msg.reply_text(reply)
            return

    # --- –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç üí± ---
    if any(word in text for word in ["–¥–æ–ª–ª–∞—Ä", "–µ–≤—Ä–æ", "—Ä—É–±", "–∫—É—Ä—Å", "usd", "eur", "rub"]):
        try:
            # –ß–∏—Å–ª–æ (—Å—É–º–º–∞)
            match = re.search(r"(\d+)", text)
            amount = float(match.group(1)) if match else 1.0

            # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            currency_map = {
                "–¥–æ–ª–ª–∞—Ä": "USD",
                "usd": "USD",
                "–µ–≤—Ä–æ": "EUR",
                "eur": "EUR",
                "—Ä—É–±": "RUB",
                "—Ä—É–±–ª—å": "RUB",
                "rub": "RUB",
            }

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—ã
            found = [cur for word, cur in currency_map.items() if word in text]
            if len(found) >= 2:
                from_cur, to_cur = found[0], found[1]
            elif "–∫—É—Ä—Å" in text and len(found) == 1:
                # "–∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä –∫ —Ä—É–±–ª—é"
                from_cur, to_cur = found[0], "RUB" if found[0] != "RUB" else "USD"
            else:
                await msg.reply_text("–ú—É—Ä–∫–∞ –Ω–µ –ø–æ–Ω—è–ª–∞, –∫–∞–∫–∏–µ –≤–∞–ª—é—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å üê∂üí±")
                return

            # –ó–∞–ø—Ä–æ—Å –∫ API
            url = f"https://api.exchangerate.host/convert?from={from_cur}&to={to_cur}&amount={amount}"
            r = requests.get(url, timeout=5)
            data = r.json()

            if "result" in data and data["result"]:
                await msg.reply_text(
                    f"{amount} {from_cur} = {round(data['result'], 2)} {to_cur} üí±"
                )
            else:
                await msg.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å üò¢")
        except Exception as e:
            await msg.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return

    # --- –û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ---
    if "–º—É—Ä–∫–∞" in text:
        await msg.reply_text("–ú—É—Ä–∫–∞ —Å–ª—É—à–∞–µ—Ç —Ç–µ–±—è üëÇüê∂")


# --- –ó–∞–ø—É—Å–∫ ---
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()