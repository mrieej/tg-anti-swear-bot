import os
import re
import time
import random
from datetime import datetime, timedelta, timezone
from collections import defaultdict, deque
from dataclasses import dataclass

from dotenv import load_dotenv
from telegram import Update, ChatPermissions
from telegram.constants import ChatType
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CommandHandler,
    filters,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
WINDOW_SECONDS = 60    # –æ–∫–Ω–æ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π
THRESHOLD = 3          # —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –º–æ–∂–Ω–æ –Ω–∞—Ä—É—à–∏—Ç—å
MUTE_SECONDS = 30      # –Ω–∞–∫–∞–∑–∞–Ω–∏–µ (–±–∞–Ω/–º—É—Ç) –Ω–∞ 30 —Å–µ–∫—É–Ω–¥

# –ó–∞–±–∞–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã
FUNNY_REPLIES = {
    "–±–æ—Ç": [
        "–ö—Ç–æ –∑–≤–∞–ª? ü§ñ",
        "–Ø —Ç—É—Ç, —è —Å–ª–µ–∂—É üëÄ",
        "–ù–µ –æ–±–∏–∂–∞–π –º–µ–Ω—è, —è —Å—Ç–∞—Ä–∞—é—Å—å üò¢",
        "–ë–æ—Ç –≤ –¥–µ–ª–µ, –±–∞–∑–∞—Ä —Ñ–∏–ª—å—Ç—Ä—É–π üí™",
    ],
    "–ø—Ä–∏–≤–µ—Ç": [
        "–ü—Ä–∏–≤–µ—Ç, —á–µ–ª–æ–≤–µ—á–µ–∫ üëã",
        "–î–∞—Ä–æ–≤–∞! –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
        "–û–ø–∞, –ø—Ä–∏–≤–µ—Ç–∏–∫–∏-–ø–∏—Å—Ç–æ–ª–µ—Ç–∏–∫–∏ üî´",
    ],
    "–∫–∞–∫ –¥–µ–ª–∞": [
        "–£ –º–µ–Ω—è –≤—Å–µ–≥–¥–∞ –æ—Ç–ª–∏—á–Ω–æ, —è –∂–µ –±–æ—Ç üòé",
        "–ñ–∏–≤—É, —Ä–∞–±–æ—Ç–∞—é 24/7 ü§ñ",
        "–õ—É—á—à–µ, —á–µ–º —É –ª—é–¥–µ–π, –Ω–µ –±–æ–ª–µ—é üòâ",
    ],
    "–∫—Ç–æ —Ç—ã": [
        "–Ø –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä, —Ç–≤–æ–π –Ω–æ—á–Ω–æ–π –∫–æ—à–º–∞—Ä üòà",
        "–Ø —Ç–≤–æ–π –¥—Ä—É–≥, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–µ–∑ –º–∞—Ç–æ–≤ üòÖ",
        "–Ø –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–∑—É–º. –ü–æ—á—Ç–∏ –°–∫–∞–π–Ω–µ—Ç.",
    ],
}

# –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è
BAD_PATTERNS = [
    r"\b—Ö[—Éy][–π–∏–µ—è—ë]\w*",
    r"\b–ø[–∏–µ]–∑–¥[–∞—ã–æ]*\w*",
    r"\b[–µ—ë]–±\w*",
    r"\b–±–ª[—è–µ]–¥[—å–π]*\w*",
    r"\b—Å—É–∫[–∞–∏–æ]*\w*",
    r"\b–º—É–¥[–∞–æ]–∫\w*",
    r"\b–ø–∏–¥[–æa]—Ä\w*",
    r"\b–¥—É—Ä–∞\w*",
    r"\b–¥—É—Ä–∞–∫\w*",
    r"\b—Ç—É–ø(–æ–π|–∞—è|—ã–µ|—ã–µ)\b",
    r"\b–∂–æ–ø\w*",
    r"\b–ø–∏—Å—å–∫\w*",
]
BAD_REGEXES = [re.compile(p, re.IGNORECASE) for p in BAD_PATTERNS]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π
violations = defaultdict(lambda: deque(maxlen=50))

@dataclass
class UserState:
    last_warn_at: float = 0.0
    shame_count: int = 0  # —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–∫–∞–∑–∞—Ç—å

state = defaultdict(UserState)

# –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã (–∞–ª–∏–∞—Å—ã) –¥–ª—è ¬´–ø–æ–∑–æ—Ä–Ω–∏–∫–æ–≤¬ª: –∫–ª—é—á = (chat_id, user_id) -> str
aliases = {}

def mention_with_alias(user, chat_id):
    """–£–ø–æ–º—è–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å."""
    label = aliases.get((chat_id, user.id)) or (user.first_name or "user")
    # –ö–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    return f'<a href="tg://user?id={user.id}">{label}</a>'


# ---------- –õ–æ–≥–∏–∫–∞ ----------
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    chat = update.effective_chat
    user = update.effective_user

    if not msg or not user or not msg.text:
        return

    text = msg.text.lower()

    # --- –ó–∞–±–∞–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã ---
    for key, answers in FUNNY_REPLIES.items():
        if key in text:
            await msg.reply_text(random.choice(answers))
            return

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞ ---
    if not any(r.search(text) for r in BAD_REGEXES):
        return

    key = (chat.id, user.id)
    now = time.time()
    q = violations[key]

    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
    while q and now - q[0] > WINDOW_SECONDS:
        q.popleft()
    q.append(now)
    strikes = len(q)

    st = state[key]
    name = mention_with_alias(user, chat.id)  # <-- –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–∏–∞—Å, –µ—Å–ª–∏ –µ—Å—Ç—å

    admin_chat_id = os.getenv("ADMIN_LOG_CHAT_ID")

    # –õ–° (–ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
    if chat.type == ChatType.PRIVATE:
        if now - st.last_warn_at > 15:
            await msg.reply_html(f"‚ö†Ô∏è {name}, –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ —Å –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏.")
            st.last_warn_at = now
        return

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    if strikes < THRESHOLD:
        if now - st.last_warn_at > 15:
            warning_text = f"‚ö†Ô∏è {name}, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ({strikes}/{THRESHOLD}) –∑–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è."
            await msg.reply_html(warning_text)
            if admin_chat_id:
                try:
                    await context.bot.send_message(
                        chat_id=int(admin_chat_id),
                        text=f"üëÆ –í —á–∞—Ç–µ {chat.title} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ({strikes}/{THRESHOLD}).",
                    )
                except Exception as e:
                    print(f"ADMIN_LOG_CHAT_ID send error: {e}")
            st.last_warn_at = now
        return

    # –ù–∞–∫–∞–∑–∞–Ω–∏–µ
    try:
        me = await context.bot.get_chat_member(chat.id, context.bot.id)
        can_restrict = getattr(me, "can_restrict_members", False)

        if can_restrict:
            until = datetime.now(timezone.utc) + timedelta(seconds=MUTE_SECONDS)
            perms = ChatPermissions(can_send_messages=False)
            await context.bot.restrict_chat_member(
                chat.id,
                user.id,
                permissions=perms,
                until_date=until,
            )
            mute_text = f"‚õî {name} –ø–æ–ª—É—á–∏–ª –±–∞–Ω –Ω–∞ {MUTE_SECONDS} —Å–µ–∫—É–Ω–¥!"
            await msg.reply_html(mute_text)
            if admin_chat_id:
                try:
                    await context.bot.send_message(
                        chat_id=int(admin_chat_id),
                        text=f"üö´ –í —á–∞—Ç–µ {chat.title} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} –ø–æ–ª—É—á–∏–ª –ë–ê–ù –Ω–∞ {MUTE_SECONDS} —Å–µ–∫—É–Ω–¥.",
                    )
                except Exception as e:
                    print(f"ADMIN_LOG_CHAT_ID send error: {e}")
            q.clear()
            st.shame_count = 0  # —Å–±—Ä–æ—Å–∏–º ¬´–ø–æ–∑–æ—Ä¬ª
        else:
            # –Ω–µ—Ç –ø—Ä–∞–≤ ‚Äî –ø–æ–∑–æ—Ä–∏–º –∏ —Å—á–∏—Ç–∞–µ–º
            st.shame_count += 1
            shame_messages = [
                f"üòÇ {name}, —É –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –∑–∞–º—É—Ç–∏—Ç—å —Ç–µ–±—è, –Ω–æ —Ç—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –ü–û–ó–û–† —á–∞—Ç–∞ ü§°",
                f"üëÄ {name}, —Å–Ω–æ–≤–∞ –ø–æ–∑–æ—Ä–∏—à—å—Å—è! –í—Å–µ —É–∂–µ –∑–∞–ø–æ–º–Ω–∏–ª–∏ —Ç–µ–±—è –∫–∞–∫ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è üòÖ",
                f"ü§£ {name}, —É—Ä–æ–≤–µ–Ω—å –ü–û–ó–û–†–ê: –ë–û–°–°! –í—Å–µ —Å–º–µ—é—Ç—Å—è –Ω–∞–¥ —Ç–æ–±–æ–π üòÇ",
                f"üî• {name}, —Ç–≤–æ–π –ø–æ–∑–æ—Ä —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ª–µ–≥–µ–Ω–¥–æ–π, —á–∞—Ç—É –±–µ–∑ —Ç–µ–±—è —Å–∫—É—á–Ω–æ üòà",
            ]
            msg_text = shame_messages[min(st.shame_count - 1, len(shame_messages) - 1)]
            await msg.reply_html(msg_text)

            # –ù–∞ 5-–π –∏ –¥–∞–ª–µ–µ ‚Äî –ø–æ–ø—ã—Ç–∫–∞ –¥–∞—Ç—å —Ç–∏—Ç—É–ª –∞–¥–º–∏–Ω—É (–µ—Å–ª–∏ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω),
            # –∏–Ω–∞—á–µ –≤–µ—à–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ¬´–ø—Å–µ–≤–¥–æ–Ω–∏–º¬ª ü§° –ü–æ–∑–æ—Ä–Ω–∏–∫ {first_name}
            if st.shame_count >= 5:
                applied = False
                # 1) –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–¥–∞—Ç—å custom title, –µ—Å–ª–∏ —É –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–æ –∏ —é–∑–µ—Ä –∞–¥–º–∏–Ω
                try:
                    victim_cm = await context.bot.get_chat_member(chat.id, user.id)
                    is_admin = victim_cm.status in ("administrator", "creator")
                    can_set_title = getattr(me, "can_promote_members", False)
                    if is_admin and can_set_title:
                        new_title = "ü§° –ü–æ–∑–æ—Ä–Ω–∏–∫"
                        await context.bot.set_chat_administrator_custom_title(chat.id, user.id, new_title)
                        await msg.reply_html(f"üé≠ {name} –ø–æ–ª—É—á–∏–ª —Ç–∏—Ç—É–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: <b>{new_title}</b>")
                        applied = True
                except Exception as e:
                    # –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏–º, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º
                    await msg.reply_html(f"‚ö†Ô∏è –•–æ—Ç–µ–ª –≤—ã–¥–∞—Ç—å —Ç–∏—Ç—É–ª, –Ω–æ –Ω–µ –≤—ã—à–ª–æ: {e}")

                # 2) –ï—Å–ª–∏ —Ç–∏—Ç—É–ª –Ω–µ –≤—ã—à–ª–æ ‚Äî –¥–∞—ë–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∞–ª–∏–∞—Å
                if not applied:
                    aliases[(chat.id, user.id)] = f"ü§° –ü–æ–∑–æ—Ä–Ω–∏–∫ {user.first_name or 'user'}"
                    await msg.reply_html(
                        f"üè∑ –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –∑–≤–∞—Ç—å —Ç–µ–±—è: <b>{aliases[(chat.id, user.id)]}</b>."
                    )

            if admin_chat_id:
                try:
                    await context.bot.send_message(
                        chat_id=int(admin_chat_id),
                        text=(f"‚ö†Ô∏è –í —á–∞—Ç–µ {chat.title} {user.full_name} —Å–Ω–æ–≤–∞ –Ω–∞—Ä—É—à–∏–ª, "
                              f"–Ω–æ —É –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤. –ü–û–ó–û–†–Ω—ã–π —Å—á—ë—Ç—á–∏–∫: {st.shame_count}."),
                    )
                except Exception as e:
                    print(f"ADMIN_LOG_CHAT_ID send error: {e}")

        st.last_warn_at = now
    except Exception as e:
        await msg.reply_html(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–∏: {e}")


# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç üëã –Ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä-–±–æ—Ç!\n"
        f"–ü–æ—Å–ª–µ {THRESHOLD} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π ‚Äî –±–∞–Ω –Ω–∞ {MUTE_SECONDS} —Å–µ–∫—É–Ω–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞).\n"
        "–ï—Å–ª–∏ –ø—Ä–∞–≤ –Ω–µ—Ç ‚Äî –≤–∫–ª—é—á–∞–µ—Ç—Å—è –ü–û–ó–û–†-—Ä–µ–∂–∏–º ü§° —Å –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–º."
    )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"- –ü–æ—Ä–æ–≥: {THRESHOLD} –Ω–∞—Ä—É—à–µ–Ω–∏–π –∑–∞ {WINDOW_SECONDS} —Å–µ–∫—É–Ω–¥\n"
        f"- –ù–∞–∫–∞–∑–∞–Ω–∏–µ: {MUTE_SECONDS} —Å–µ–∫—É–Ω–¥\n"
        f"- –ü–æ–∑–æ—Ä–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –∏ –∞–ª–∏–∞—Å—ã –≤–∫–ª—é—á–µ–Ω—ã ü§°"
    )


# ---------- –ó–∞–ø—É—Å–∫ ----------
def main():
    load_dotenv()
    token = os.getenv("BOT_TOKEN")
    port = int(os.getenv("PORT", 8443))
    webhook_url = os.getenv("WEBHOOK_URL")  # –ø—Ä–∏–º–µ—Ä: https://tg-anti-swear-bot.onrender.com

    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path="webhook",
        webhook_url=f"{webhook_url}/webhook",
    )


if __name__ == "__main__":
    main()