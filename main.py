import os
import logging
import datetime
from aiohttp import web
from telegram import Update, ChatPermissions
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 8000))

# ID –∞–¥–º–∏–Ω–∞ (–º–æ–∂–µ—à—å —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π Telegram ID)
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

# –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤
BAD_WORDS = [
    "–¥—É—Ä–∞–∫", "–¥—É—Ä–∞", "—Ç—É–ø–æ–π", "—Ç—É–ø–∞—è", "–∏–¥–∏–æ—Ç", "–∏–¥–∏–æ—Ç–∫–∞",
    "–ø–∏—Å—å–∫–∞", "–∂–æ–ø–∞", "–ø–æ—à–ª–∞ –≤ –∂–æ–ø—É", "–ø–æ—à–µ–ª –≤ –∂–æ–ø—É",
    "—Å—É–∫–∞", "–º—Ä–∞–∑—å"
]

# –°—á—ë—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
WARNINGS = {}


# –ö–æ–º–∞–Ω–¥—ã
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç üëã –Ø –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä.\n"
        "–Ø –≤—ã–¥–∞—é –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∑–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è.\n"
        "–ï—Å–ª–∏ –∏—Ö –±—É–¥–µ—Ç 3 ‚Äî –∑–∞–º—É—á—É –Ω–∞ 30 —Å–µ–∫—É–Ω–¥ ‚è≥.\n"
        "–ü–æ–ø—Ä–æ–±—É–π /ping üöÄ"
    )


async def cmd_ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –Ø –∂–∏–≤–æ–π –∏ —Ä–∞–±–æ—Ç–∞—é!")


async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚öôÔ∏è –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")


async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n/start\n/ping\n/status\n/help")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    user = update.message.from_user
    chat = update.message.chat
    text = update.message.text.lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞
    for bad_word in BAD_WORDS:
        if bad_word in text:
            user_id = user.id
            WARNINGS[user_id] = WARNINGS.get(user_id, 0) + 1
            count = WARNINGS[user_id]

            # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            if ADMIN_ID != 0:
                try:
                    await context.bot.send_message(
                        ADMIN_ID,
                        f"üëÆ –ù–∞—Ä—É—à–µ–Ω–∏–µ –≤ —á–∞—Ç–µ <b>{chat.title}</b>\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.mention_html()}\n"
                        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: <code>{update.message.text}</code>\n"
                        f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {count}/3",
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

            if count < 3:
                await update.message.reply_text(
                    f"‚ö†Ô∏è {user.first_name}, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {count}/3 –∑–∞ —Å–ª–æ–≤–æ ¬´{bad_word}¬ª!"
                )
            else:
                WARNINGS[user_id] = 0  # —Å–±—Ä–æ—Å –ø–æ—Å–ª–µ –º—É—Ç–∞
                try:
                    until_date = datetime.datetime.now() + datetime.timedelta(seconds=30)
                    await chat.restrict_member(
                        user_id,
                        permissions=ChatPermissions(can_send_messages=False),
                        until_date=until_date,
                    )
                    await update.message.reply_text(
                        f"‚õî {user.first_name} –∑–∞–º—É—á–µ–Ω –Ω–∞ 30 —Å–µ–∫—É–Ω–¥ –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è!"
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ: {e}")
            return

    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–ª–æ–≤–æ "–±–æ—Ç"
    if "–±–æ—Ç" in text:
        await update.message.reply_text("–Ø —Ç—É—Ç! üëÄ")


# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    if not BOT_TOKEN or not WEBHOOK_URL:
        raise RuntimeError("–ù–µ—Ç BOT_TOKEN –∏–ª–∏ WEBHOOK_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

    app = Application.builder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("ping", cmd_ping))
    app.add_handler(CommandHandler("status", cmd_status))
    app.add_handler(CommandHandler("help", cmd_help))

    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    # aiohttp –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    web_app = web.Application()
    web_app.router.add_post("/webhook", app.webhook_handler)

    async def health(request):
        return web.Response(text="OK")

    web_app.router.add_get("/", health)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    web.run_app(web_app, host="0.0.0.0", port=PORT)


if __name__ == "__main__":
    main()