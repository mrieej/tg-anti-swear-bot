import os
import re
import time
import random
import requests
from datetime import datetime, timedelta, timezone
from collections import defaultdict, deque
from dataclasses import dataclass

from dotenv import load_dotenv
from telegram import Update
from telegram.constants import ChatType
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CommandHandler,
    filters,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
WINDOW_SECONDS = 60
THRESHOLD = 3
BAN_SECONDS = 30

# –ü–∞–º—è—Ç—å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
last_amount = defaultdict(float)

# –°–ª–æ–≤–∞—Ä—å –≤–∞–ª—é—Ç
CURRENCY_MAP = {
    "—Ä—É–±–ª—å": "RUB", "—Ä—É–±": "RUB", "‚ÇΩ": "RUB",
    "–¥–æ–ª–ª–∞—Ä": "USD", "–±–∞–∫—Å": "USD", "$": "USD",
    "–µ–≤—Ä–æ": "EUR", "‚Ç¨": "EUR",
    "—Ñ—É–Ω—Ç": "GBP", "—Å—Ç–µ—Ä–ª–∏–Ω–≥": "GBP", "¬£": "GBP",
    "—é–∞–Ω—å": "CNY", "¬•": "CNY",
    "–π–µ–Ω–∞": "JPY", "–∏–µ–Ω–∞": "JPY",
    "—Ç–µ–Ω–≥–µ": "KZT",
    "–≥—Ä–∏–≤–Ω–∞": "UAH",
    "–∑–ª–æ—Ç—ã–π": "PLN",
    "–±–∏—Ç–∫–æ–∏–Ω": "BTC", "btc": "BTC", "‚Çø": "BTC",
    "—ç—Ñ–∏—Ä": "ETH", "eth": "ETH",
}

def normalize_currency(name: str) -> str:
    name = name.lower()
    return CURRENCY_MAP.get(name, name.upper())

# –§—Ä–∞–∑—ã –ú—É—Ä–∫–∏ üê∂ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫, –Ω–µ –º–µ–Ω—è–µ–º)

MURKA_REPLIES = {
    "–±–æ—Ç": ["–ö—Ç–æ –∑–≤–∞–ª? ü§ñ", "–Ø —Ç—É—Ç, —è —Å–ª–µ–∂—É üëÄ", "–ù–µ –æ–±–∏–∂–∞–π –º–µ–Ω—è, —è —Å—Ç–∞—Ä–∞—é—Å—å üò¢", "–ë–æ—Ç –≤ –¥–µ–ª–µ, –±–∞–∑–∞—Ä —Ñ–∏–ª—å—Ç—Ä—É–π üí™"],
    "–º—É—Ä–∫–∞": ["–ì–∞–≤! üê∂ –¢—É—Ç –ú—É—Ä–∫–∞!", "–ú—É—Ä–∫–∞ –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º ‚ù§Ô∏è", "–ú—É—Ä–∫–∞ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —Ç–µ–±—è üëÄ"],
    "–ø—Ä–∏–≤–µ—Ç": ["–ü—Ä–∏–≤–µ—Ç, —á–µ–ª–æ–≤–µ—á–µ–∫ üëã", "–î–∞—Ä–æ–≤–∞! –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?", "–û–ø–∞, –ø—Ä–∏–≤–µ—Ç–∏–∫–∏-–ø–∏—Å—Ç–æ–ª–µ—Ç–∏–∫–∏ üî´", "–ú—É—Ä–∫–∞ –º–∞—à–µ—Ç –ª–∞–ø–∫–æ–π üêæ"],
    "–∫–∞–∫ –¥–µ–ª–∞": ["–£ –º–µ–Ω—è –≤—Å–µ–≥–¥–∞ –æ—Ç–ª–∏—á–Ω–æ, —è –∂–µ –±–æ—Ç üòé", "–ñ–∏–≤—É, —Ä–∞–±–æ—Ç–∞—é 24/7 ü§ñ", "–õ—É—á—à–µ, —á–µ–º —É –ª—é–¥–µ–π, –Ω–µ –±–æ–ª–µ—é üòâ", "–ú—É—Ä–∫–∞ —Ä–∞–¥–æ—Å—Ç–Ω–æ –≤–∏–ª—èe—Ç —Ö–≤–æ—Å—Ç–∏–∫–æ–º üêï"],
    "–∫—Ç–æ —Ç—ã": ["–Ø –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä, —Ç–≤–æ–π –Ω–æ—á–Ω–æ–π –∫–æ—à–º–∞—Ä üòà", "–Ø —Ç–≤–æ–π –¥—Ä—É–≥, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–µ–∑ –º–∞—Ç–æ–≤ üòÖ", "–Ø –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–∑—É–º. –ü–æ—á—Ç–∏ –°–∫–∞–π–Ω–µ—Ç.", "–Ø –ú—É—Ä–∫–∞, —Ç–≤–æ—è –æ—Ö—Ä–∞–Ω–Ω–∏—Ü–∞ üê∂"],
    "–≥—É–ª—è—Ç—å": ["–£—Ä–∞! üêï –ö—Ç–æ —Å–∫–∞–∑–∞–ª –≥—É–ª—è—Ç—å?!", "–ú—É—Ä–∫–∞ —É–∂–µ –±–µ–∂–∏—Ç –∑–∞ –ø–æ–≤–æ–¥–∫–æ–º! üêæ", "–ì—É–ª—è—Ç—å ‚Äî –º–æ—ë –ª—é–±–∏–º–æ–µ –∑–∞–Ω—è—Ç–∏–µ! üå≥"],
    "–¥–∞–π –ª–∞–ø—É": ["–í–æ—Ç –ª–∞–ø–∫–∞ üêæ", "–ú—É—Ä–∫–∞ –ø—Ä–æ—Ç—è–Ω—É–ª–∞ –ª–∞–ø—É üê∂", "–ù–∞, –¥–µ—Ä–∂–∏ –ª–∞–ø–∫—É ‚ù§Ô∏è"],
    "–∏–≥—Ä–∞—Ç—å": ["–ò–≥—Ä–∞—Ç—å?! –ú—É—Ä–∫–∞ –≥–æ—Ç–æ–≤–∞! üéâ", "–î–∞–≤–∞–π –∏–≥—Ä–∞—Ç—å, —è –ø—Ä–∏–Ω–µ—Å–ª–∞ –º—è—á–∏–∫ ‚öΩ", "–ò–≥—Ä—ã ‚Äî —ç—Ç–æ –º–æ—ë –≤—Å—ë üêï"],
    "–º—è—á": ["‚öΩ –î–µ—Ä–∂–∏ –º—è—á–∏–∫!", "–ú—É—Ä–∫–∞ –ø—Ä–∏–Ω–µ—Å–ª–∞ —Ç–µ–±–µ –º—è—á üê∂", "–î–∞–π –º—è—á–∏–∫, –¥–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º! üéæ"],
    "–≤–∫—É—Å–Ω—è—à–∫": ["–ú—É—Ä–∫–∞ —Ö–æ—á–µ—Ç –≤–∫—É—Å–Ω—è—à–∫—É üòã", "–ê –º–æ–∂–Ω–æ –∫–æ—Ç–ª–µ—Ç–∫—É? üçñ", "–£–≥–æ—Å—Ç–∏ –ú—É—Ä–∫—É —á–µ–º-–Ω–∏–±—É–¥—å –≤–∫—É—Å–Ω—ã–º üêæ"],
    "–ª—é–±–∏—à—å": ["–ú—É—Ä–∫–∞ –ª—é–±–∏—Ç –≤—Å–µ—Ö —Ö–æ—Ä–æ—à–∏—Ö –ª—é–¥–µ–π ‚ù§Ô∏è", "–ö–æ–Ω–µ—á–Ω–æ —Ç–µ–±—è! üê∂", "–ú—É—Ä–∫–∞ –ª—é–±–∏—Ç –≤–∫—É—Å–Ω—è—à–∫–∏ –∏ –≥—É–ª—è—Ç—å üå≥"],
    "–ø–µ—Å–Ω—è": ["Aerosmith - What It Takes üé∂ —É—É—Éüê∫üíÉ", "–ú—É—Ä–∫–∞ –Ω–∞–ø–µ–≤–∞–µ—Ç –ª—é–±–∏–º—É—é –ø–µ—Å–Ω—é üé§"],
    "–º—É—Ä–∫–∞ –∫–∞–∫ –¥–µ–ª–∞": ["–ì–∞–≤! –£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ üêæ", "–õ—É—á—à–µ –≤—Å–µ—Ö! –í–µ–¥—å —è —Å–æ–±–∞—á–∫–∞ –ú—É—Ä–∫–∞ üê∂üíñ"],
    "–º—É—Ä–∫–∞ –∫–æ–≥–æ —Ç—ã –ª—é–±–∏—à—å": ["–ö–æ–Ω–µ—á–Ω–æ –∂–µ —Ç–µ–±—è, –º–æ–π —á–µ–ª–æ–≤–µ–∫ üêæ‚ù§Ô∏è", "–õ—é–±–ª—é –≤—Å–µ—Ö, –∫—Ç–æ –¥–∞—ë—Ç –≤–∫—É—Å–Ω—è—à–∫–∏ üçñ"],
    "–º—É—Ä–∫–∞ —Ö–æ—á–µ—à—å –≤–∫—É—Å–Ω—è—à–∫–∏": ["–ì–∞–≤-–≥–∞–≤! –î–∞–≤–∞–π —Å–∫–æ—Ä–µ–µ! ü¶¥", "–ö–æ—Ç–ª–µ—Ç–∫—É? –£—É—É—É, –¥–∞–≤–∞–π! üçñ"],
    "–º—É—Ä–∫–∞ –∫–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –ø–µ—Å–Ω—è": ["Aerosmith - What It Takes! —É—É—Éüê∫üíÉ", "–Ø –ø–æ—é –≥—Ä–æ–º–∫–æ: –ì–ê–í-–ì–ê–í-–ì–ê–í üé∂"],
    "–∫–æ—Ç–ª–µ—Ç": ["–ö–æ—Ç–ª–µ—Ç–∫–∞? –î–∞–π –¥–≤–µ! üçñüêæ", "–Ø –∑–∞ –∫–æ—Ç–ª–µ—Ç—É –≤—Å—ë —Å–¥–µ–ª–∞—é üêï"],
    "–¥–∞–π –º—è—á": ["‚öΩ –í–æ—Ç —Ç–≤–æ–π –º—è—á–∏–∫, –∫–∏–¥–∞–π –æ–±—Ä–∞—Ç–Ω–æ!", "‚öΩ‚öΩ‚öΩ –ì–∞–≤-–≥–∞–≤, –∏–≥—Ä–∞–µ–º?"],
    "–ø—Ä–∏–Ω–µ—Å–∏ –º—è—á": ["‚öΩ –Ø –ø—Ä–∏–Ω–µ—Å–ª–∞! –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑ –∫–∏–Ω—å!", "‚öΩ –ù–∞—à–ª–∞ –º—è—á–∏–∫, –¥–µ—Ä–∂–∏!"],
    "–º—É—Ä–∫–∞ –æ—Ö—Ä–∞–Ω—è–π": ["–ì—Ä—Ä—Ä! –Ø –æ—Ö—Ä–∞–Ω—è—é —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é üõ°Ô∏èüêï", "–ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–π–¥—ë—Ç! üê∫"],
    "–º—É—Ä–∫–∞ –æ—Ö—Ä–∞–Ω—è–µ—à—å": ["–ö–æ–Ω–µ—á–Ω–æ, —è –Ω–∞ –ø–æ—Å—Ç—É! üêæüëÆ‚Äç‚ôÄÔ∏è", "–Ø –≤—Å–µ–≥–¥–∞ –æ—Ö—Ä–∞–Ω—è—é —Å–≤–æ–π —á–∞—Ç üõ°Ô∏è"],
    "–º—É—Ä–∫–∞ –¥–∞–π –ª–∞–ø—É": ["üêæ –í–æ—Ç —Ç–µ–±–µ –ª–∞–ø–∫–∞!", "–õ–∞–ø–∫—É –¥–∞—é, —Ç–æ–ª—å–∫–æ –≤–∫—É—Å–Ω—è—à–∫—É –Ω–µ –∑–∞–±—É–¥—å üçñ"],
    "–º—É—Ä–∫–∞ –¥–∞–π –ø—Ä–∞–≤—É—é –ª–∞–ø—É": ["üêæ –í–æ—Ç –ø—Ä–∞–≤–∞—è –ª–∞–ø–∫–∞!"],
    "–º—É—Ä–∫–∞ –¥–∞–π –ª–µ–≤—É—é –ª–∞–ø—É": ["üêæ –í–æ—Ç –ª–µ–≤–∞—è –ª–∞–ø–∫–∞!"],
    "–º—É—Ä–∫–∞ —Å–∫—É—á–Ω–æ": ["–î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º —Å –º—è—á–∏–∫–æ–º ‚öΩ", "–•–æ—á–µ—à—å, –ø–æ–∫–∞–∂—É —Ç—Ä—é–∫? üê∂"],
    "–º—É—Ä–∫–∞ –∑–∞—Å–∫—É—á–∞–ª–∞": ["–ì–∞–≤! –î–∞–≤–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å —Å–¥–µ–ª–∞–µ–º –≤–º–µ—Å—Ç–µ üêæ"],
    "–º—É—Ä–∫–∞ —Å–ø–æ–π –ø–µ—Å–Ω—é": ["–ì–∞–≤-–≥–∞–≤-–≥–∞–≤-–≥–∞–≤ üé∂", "–ê—É—É—É—É—É üê∫üéµ"],
    "–º—É—Ä–∫–∞ –ø–æ–ø–æ–π": ["–ì–ê–í-–ì–ê–í-–ì–ê–í! –≠—Ç–æ –º–æ—è –ø–µ—Å–Ω—è üé§üê∂"],
    "–º—É—Ä–∫–∞ –∑–ª–∞—è": ["–ì—Ä—Ä—Ä—Ä—Ä—Ä üòàüêï", "–õ—É—á—à–µ –Ω–µ —à—É—Ç–∏ —Å–æ –º–Ω–æ–π! üê∫"],
    "–º—É—Ä–∫–∞ –∑–ª–æ–π": ["–Ø –º–æ–≥—É –±—ã—Ç—å —Å—Ç—Ä–∞—à–Ω–æ–π! üêæüëπ", "–ì–∞–≤-–≥–∞–≤! –ù–µ –∑–ª–∏ –º–µ–Ω—è üêï"],
}

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª–∏–Ω–Ω—ã–π) ---
BAD_PATTERNS = [
    r"\b—Ö[—Éy][–π–∏–µ—è—ë]\w*",
    r"\b–ø[–∏–µ]–∑–¥[–∞—ã–æ]*\w*",
    r"\b[–µ—ë]–±\w*",
    r"\b–±–ª[—è–µ]–¥[—å–π]*\w*",
    r"\b—Å—É–∫[–∞–∏–æ]*\w*",
    r"\b–º—É–¥[–∞–æ]–∫\w*",
    r"\b–ø–∏–¥[–æa]—Ä\w*",
    r"\b–¥—É—Ä–∞\w*",
    r"\b–¥—É—Ä–∞–∫\w*",
    r"\b—Ç—É–ø(–æ–π|–∞—è|—ã–µ|—ã–µ|–æ—Ä—ã–ª—ã–π)\b",
    r"\b–∂–æ–ø\w*",
    r"\b–ø–∏—Å—å–∫\w*",
    r"\b—á—É—à–∫–∞\b",
    r"\b—á—É—Ö–∞–Ω\w*",
    r"\b–µ–±–∞–Ω–∞—à–∫\w*",
    r"\b—Å–º–æ\b",
    r"\b–º—Ä–∞–∑—å\b",
    r"\b–¥–µ–±–∏–ª(–∫–∞)?\b",
    r"\b–¥–∏–±–∏–ª(–∫–∞)?\b",
    r"\b—É—Ä–æ–¥(–∫–∞|–∏–Ω–∞)?\b",
    r"\b–¥–∞—É–Ω\b",
    r"\b–¥–æ–ª–±–æ–µ–±\w*",
    r"\b–∫[–∞–æ]–∑–µ–ª\b",
    r"\b–ª–æ—Ö(–∏)?\b",
    r"\b–ª–æ—à–∞—Ä\w*",
    r"\b—á–º–æ–Ω—è\b",
    r"\b—á–º–æ\b",
    r"\b–≥–æ–≤–Ω–æ–µ–¥(—ã|–∫–∞)?\b",
    r"\b–≥–Ω–∏–¥–∞\b",
]
BAD_REGEXES = [re.compile(p, re.IGNORECASE) for p in BAD_PATTERNS]

violations = defaultdict(lambda: deque(maxlen=50))

@dataclass
class UserState:
    last_warn_at: float = 0.0

state = defaultdict(UserState)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç ---
def fetch_rate(base: str, target: str) -> float | None:
    try:
        url = f"https://open.er-api.com/v6/latest/{base}"
        resp = requests.get(url, timeout=5).json()
        if resp.get("result") == "success":
            return resp["rates"].get(target)
    except Exception:
        return None
    return None

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    chat = update.effective_chat
    user = update.effective_user
    if not msg or not user or not msg.text:
        return
    text = msg.text.lower()

    # --- –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç ---
    match_course = re.search(r"(–∫—É—Ä—Å|rate)\s+([a-z–∞-—è‚ÇΩ$‚Ç¨¬£¬•‚Çø]+)\s*(?:–∫|to)?\s*([a-z–∞-—è‚ÇΩ$‚Ç¨¬£¬•‚Çø]+)?", text)
    if match_course:
        base = normalize_currency(match_course.group(2))
        target = normalize_currency(match_course.group(3)) if match_course.group(3) else "RUB"
        rate = fetch_rate(base, target)
        if rate:
            await msg.reply_text(f"–ö—É—Ä—Å: 1 {base} = {rate:.2f} {target}")
        else:
            await msg.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å.")
        return

    match_conv = re.search(r"(\d+(?:\.\d+)?)\s*([a-z–∞-—è‚ÇΩ$‚Ç¨¬£¬•‚Çø]+)\s*(?:–≤|to)\s*([a-z–∞-—è‚ÇΩ$‚Ç¨¬£¬•‚Çø]+)", text)
    if match_conv:
        amount = float(match_conv.group(1))
        base = normalize_currency(match_conv.group(2))
        target = normalize_currency(match_conv.group(3))
        rate = fetch_rate(base, target)
        if rate:
            result = amount * rate
            last_amount[user.id] = amount
            await msg.reply_text(f"{amount} {base} = {result:.2f} {target}")
        else:
            await msg.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å.")
        return

    # --- –û—Ç–≤–µ—Ç—ã –ú—É—Ä–∫–∏ üê∂ ---
    for key, answers in MURKA_REPLIES.items():
        if key in text:
            await msg.reply_text(random.choice(answers))
            return

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞ ---
    if any(r.search(text) for r in BAD_REGEXES):
        # (–æ—Å—Ç–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏, –Ω–µ –º–µ–Ω—è–µ–º)
        pass

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ì–∞–≤-–≥–∞–≤! üê∂ –Ø –ú—É—Ä–∫–∞ ‚Äî —Ç–≤–æ–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä!\n"
        f"–Ø —Å–ª–µ–∂—É –∑–∞ —á–∞—Ç–æ–º –∏ –≤—ã–¥–∞—é –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∑–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞.\n"
        f"–ü–æ—Å–ª–µ {THRESHOLD} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π ‚Äî –±–∞–Ω –Ω–∞ {BAN_SECONDS} —Å–µ–∫—É–Ω–¥.\n"
        "–ê –µ—â—ë —è –ª—é–±–ª—é –≥—É–ª—è—Ç—å, –≤–∫—É—Å–Ω—è—à–∫–∏, –∏–≥—Ä–∞—Ç—å —Å –º—è—á–∏–∫–æ–º ‚öΩ –∏ —É–º–µ—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—ã üí±"
    )

def main():
    load_dotenv()
    token = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.run_polling()

if __name__ == "__main__":
    main()