import os
import re
import time
from datetime import datetime, timedelta, timezone
from collections import defaultdict, deque
from dataclasses import dataclass

from dotenv import load_dotenv
from telegram import Update, ChatPermissions
from telegram.constants import ChatType
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CommandHandler,
    filters,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
WINDOW_SECONDS = 60   # –æ–∫–Ω–æ –ø–æ–¥—Å—á—ë—Ç–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
THRESHOLD = 3         # —Å–∫–æ–ª—å–∫–æ –º–∞—Ç–æ–≤ –¥–æ–ø—É—Å—Ç–∏–º–æ –∑–∞ –æ–∫–Ω–æ
MUTE_SECONDS = 30     # –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

# –°–ø–∏—Å–æ–∫ –º–∞—Ç–æ–≤ (—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è)
MAT_PATTERNS = [
    r"\b—Ö[—Éy][–π–∏–µ—è—ë]\w*",
    r"\b–ø[–∏–µ]–∑–¥[–∞—ã–æ]*\w*",
    r"\b[–µ—ë]–±\w*",
    r"\b–±–ª[—è–µ]–¥[—å–π]*\w*",
    r"\b—Å—É–∫[–∞–∏–æ]*\w*",
    r"\b–º—É–¥[–∞–æ]–∫\w*",
    r"\b–ø–∏–¥[–æa]—Ä\w*",
]
MAT_REGEXES = [re.compile(p, re.IGNORECASE) for p in MAT_PATTERNS]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π
violations = defaultdict(lambda: deque(maxlen=50))

@dataclass
class UserState:
    last_warn_at: float = 0.0

state = defaultdict(UserState)


# ---------- –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ----------
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    chat = update.effective_chat
    user = update.effective_user

    if not msg or not user or not msg.text:
        return

    text = msg.text.lower()
    if not any(r.search(text) for r in MAT_REGEXES):
        return

    key = (chat.id, user.id)
    now = time.time()
    q = violations[key]
    while q and now - q[0] > WINDOW_SECONDS:
        q.popleft()
    q.append(now)
    strikes = len(q)

    st = state[key]
    name = user.mention_html()

    # –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–∞—Ç–æ–º
    try:
        await msg.delete()
    except Exception:
        pass

    # –õ–°
    if chat.type == ChatType.PRIVATE:
        if now - st.last_warn_at > 15:
            await msg.reply_html(f"‚ö†Ô∏è {name}, –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ —Å –ª–µ–∫—Å–∏–∫–æ–π.")
            st.last_warn_at = now
        return

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    if strikes < THRESHOLD:
        if now - st.last_warn_at > 15:
            await msg.reply_html(
                f"‚ö†Ô∏è {name}, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ –º–∞—Ç ({strikes}/{THRESHOLD})."
            )
            st.last_warn_at = now
        return

    # –ú—É—Ç
    try:
        until = datetime.now(timezone.utc) + timedelta(seconds=MUTE_SECONDS)
        perms = ChatPermissions(can_send_messages=False)
        await context.bot.restrict_chat_member(
            chat.id,
            user.id,
            permissions=perms,
            until_date=until,
        )
        await msg.reply_html(f"‚õî {name} –∑–∞–º—É—á–µ–Ω –Ω–∞ {MUTE_SECONDS}—Å –∑–∞ –º–∞—Ç—ã!")
        q.clear()
        st.last_warn_at = now
    except Exception as e:
        await msg.reply_html(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä.\n"
        f"–Ø —É–¥–∞–ª—è—é –º–∞—Ç—ã –∏ –º–æ–≥—É –∑–∞–º—É—Ç–∏—Ç—å –Ω–∞ {MUTE_SECONDS} —Å–µ–∫—É–Ω–¥.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /status —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"- –ü–æ—Ä–æ–≥: {THRESHOLD} –º–∞—Ç–∞ –∑–∞ {WINDOW_SECONDS} —Å–µ–∫—É–Ω–¥\n"
        f"- –ú—É—Ç: {MUTE_SECONDS} —Å–µ–∫—É–Ω–¥"
    )

# ‚úÖ –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –Ø –∂–∏–≤–æ–π –∏ —Ä–∞–±–æ—Ç–∞—é!")


# ---------- –ó–∞–ø—É—Å–∫ ----------
def main():
    load_dotenv()
    token = os.getenv("BOT_TOKEN")
    port = int(os.getenv("PORT", 8443))
    webhook_url = os.getenv("WEBHOOK_URL")  # –ø—Ä–∏–º–µ—Ä: https://tg-anti-swear-bot.onrender.com

    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("ping", ping))   # <--- –¥–æ–±–∞–≤–ª–µ–Ω–æ
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ Webhook (–¥–ª—è Render)
    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path="webhook",
        webhook_url=f"{webhook_url}/webhook",
    )


if __name__ == "__main__":
    main()