import os
import logging
from datetime import datetime, timedelta, timezone
from collections import deque
from telegram import Update, ChatPermissions
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

BAD_WORDS = [
    "–¥—É—Ä–∞–∫", "–¥—É—Ä–∞", "–∏–¥–∏–æ—Ç", "—Ç—É–ø–æ–π", "—Ç—É–ø–∞—è",
    "–ø–∏—Å—å–∫–∞", "–∂–æ–ø–∞", "–ø–æ—à–µ–ª –≤ –∂–æ–ø—É", "–ø–æ—à–ª–∞ –≤ –∂–æ–ø—É",
    "–ª–æ—Ö", "–ª–æ—à–∞—Ä–∞", "—Å–≤–æ–ª–æ—á—å", "—Ç–≤–∞—Ä—å"
]

THRESHOLD = 2           # –∫–æ–ª-–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ –º—É—Ç–∞
MUTE_SECONDS = 30       # –≤—Ä–µ–º—è –º—É—Ç–∞

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

class UserState:
    def __init__(self):
        self.strikes = 0
        self.queue = deque(maxlen=5)
        self.last_warn_at = datetime.min.replace(tzinfo=timezone.utc)

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    await chat.send_message(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä.\n"
        "–Ø —É–¥–∞–ª—è—é –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏ –º–æ–≥—É –∑–∞–º—É—Ç–∏—Ç—å –Ω–∞ 30 —Å–µ–∫—É–Ω–¥.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /status —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n"
        "–ê –µ—â—ë –ø—Ä–æ–≤–µ—Ä—å –º–µ–Ω—è —á–µ—Ä–µ–∑ /ping üöÄ"
    )

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    await chat.send_message("‚úÖ –Ø –∂–∏–≤–æ–π –∏ —Ä–∞–±–æ—Ç–∞—é!")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    await chat.send_message(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"- –ü–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞: {len(BAD_WORDS)}\n"
        f"- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ –º—É—Ç–∞: {THRESHOLD}\n"
        f"- –í—Ä–µ–º—è –º—É—Ç–∞: {MUTE_SECONDS} —Å–µ–∫."
    )

# –§–∏–ª—å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
async def moderate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    chat = update.effective_chat
    user = update.effective_user

    if not msg or not msg.text:
        return

    text = msg.text.lower()
    if not any(bad in text for bad in BAD_WORDS):
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await msg.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —Å–º–æ–≥ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    state = user_states.setdefault(user.id, UserState())
    state.queue.append(datetime.now(timezone.utc))
    state.strikes += 1
    now = datetime.now(timezone.utc)

    name = user.mention_html()

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    if state.strikes < THRESHOLD:
        if now - state.last_warn_at > timedelta(seconds=15):
            await chat.send_message(
                f"‚ö†Ô∏è {name}, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ "
                f"({state.strikes}/{THRESHOLD}).",
                parse_mode="HTML",
            )
            state.last_warn_at = now
        return

    # –ú—É—Ç
    try:
        until = datetime.now(timezone.utc) + timedelta(seconds=MUTE_SECONDS)
        perms = ChatPermissions(can_send_messages=False)
        await context.bot.restrict_chat_member(
            chat.id,
            user.id,
            permissions=perms,
            until_date=until,
        )
        await chat.send_message(
            f"‚õî {name} –∑–∞–º—É—á–µ–Ω –Ω–∞ {MUTE_SECONDS}—Å –∑–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è!",
            parse_mode="HTML",
        )
        state.queue.clear()
        state.last_warn_at = now
    except Exception as e:
        await chat.send_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, moderate))

    # Webhook
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 8080)),
        url_path=TOKEN,
        webhook_url=f"{WEBHOOK_URL}/{TOKEN}",
    )

if __name__ == "__main__":
    main()