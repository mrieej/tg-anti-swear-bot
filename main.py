import os
import re
import time
import random
from datetime import datetime, timedelta, timezone
from collections import defaultdict, deque
from dataclasses import dataclass

from dotenv import load_dotenv
from telegram import Update, ChatPermissions
from telegram.constants import ChatType
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CommandHandler,
    filters,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
WINDOW_SECONDS = 60    # –æ–∫–Ω–æ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π
THRESHOLD = 3          # —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –º–æ–∂–Ω–æ –Ω–∞—Ä—É—à–∏—Ç—å
BAN_SECONDS = 30       # –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω –Ω–∞ 30 —Å–µ–∫—É–Ω–¥

# –ó–∞–±–∞–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã ‚Äî —Å—Ç–∏–ª—å —Å–æ–±–∞—á–∫–∏ –ú—É—Ä–∫–∏ üê∂
FUNNY_REPLIES = {
    "–ø—Ä–∏–≤–µ—Ç": [
        "–ì–∞–≤-–≥–∞–≤! üêæ –ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!",
        "–í–∏–∏–∏–∏! –ú—É—Ä–∫–∞ —Ä–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å üê∂",
        "–û, –ø—Ä–∏–≤–µ—Ç! –ü–æ–π–¥—ë–º –≥—É–ª—è—Ç—å? üå≥",
    ],
    "–≥—É–ª—è—Ç—å": [
        "–£—Ä–∞! üêï –Ø —É–∂–µ –±–µ–≥—É –∑–∞ –ø–æ–≤–æ–¥–∫–æ–º!",
        "–ì–∞–≤! ü¶¥ –î–∞–≤–∞–π —Å–∫–æ—Ä–µ–µ –Ω–∞ —É–ª–∏—Ü—É!",
        "–ú—É—Ä–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–≥—É–ª–∫–µ, —Ö–≤–æ—Å—Ç–∏–∫–æ–º –º–∞—à—É! üêæ",
    ],
    "–≤–∫—É—Å–Ω—è—à–∫": [
        "–û–≥–æ! üçñ –ê –º–æ–∂–Ω–æ –º–Ω–µ —Ç–æ–∂–µ –∫—É—Å–æ—á–µ–∫?",
        "–ú—É—Ä–∫–∞ –æ–±–æ–∂–∞–µ—Ç –≤–∫—É—Å–Ω—è—à–∫–∏ üòã",
        "–ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Ç–ª–µ—Ç–∫–∞ ‚Äî —è —Ç–≤–æ—è –Ω–∞–≤—Å–µ–≥–¥–∞ üê∂‚ù§Ô∏è",
    ],
    "–∫–æ—Ç–ª–µ—Ç": [
        "–í–∞—É, –∫–æ—Ç–ª–µ—Ç–∫–∞?! üòç –Ø —É–∂–µ —Å–ª—é–Ω–æ–π –∑–∞–ª–∏–ª–∞—Å—å!",
        "–ú—É—Ä–∫–∞ –ª—é–±–∏—Ç –∫–æ—Ç–ª–µ—Ç–∫–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ üòã",
    ],
    "–º—è—á": [
        "–ì–∞–≤-–≥–∞–≤! üéæ –ö–∏–¥–∞–π –º—è—á–∏–∫, —è –ø–æ–π–º–∞—é!",
        "–Ø —É–∂–µ –±–µ–≥—É –∑–∞ –º—è—á–∏–∫–æ–º üêæ",
        "–ú—É—Ä–∫–∞ –ª—é–±–∏—Ç –∏–≥—Ä–∞—Ç—å —Å –º—è—á–∏–∫–æ–º, –±—Ä–æ—à—É —Ç–µ–±–µ –æ–±—Ä–∞—Ç–Ω–æ üê∂",
    ],
    "–∫—Ç–æ —Ç—ã": [
        "–Ø –ú—É—Ä–∫–∞ üêï, —Å–æ–±–∞—á–∫–∞-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä!",
        "–Ø —Ç–≤–æ—è –≤–µ—Ä–Ω–∞—è –∑–∞—â–∏—Ç–Ω–∏—Ü–∞ –æ—Ç –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤ üêæ",
        "–Ø –ú—É—Ä–∫–∞! –õ—é–±–ª—é –≥—É–ª—è—Ç—å, –∏–≥—Ä–∞—Ç—å –∏ –ª–æ–≤–∏—Ç—å –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π üê∂",
    ],
}

# –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è
BAD_PATTERNS = [
    r"\b—Ö[—Éy][–π–∏–µ—è—ë]\w*",
    r"\b–ø[–∏–µ]–∑–¥[–∞—ã–æ]*\w*",
    r"\b[–µ—ë]–±\w*",
    r"\b–±–ª[—è–µ]–¥[—å–π]*\w*",
    r"\b—Å—É–∫[–∞–∏–æ]*\w*",
    r"\b–º—É–¥[–∞–æ]–∫\w*",
    r"\b–ø–∏–¥[–æa]—Ä\w*",
    r"\b–¥—É—Ä–∞\w*",
    r"\b–¥—É—Ä–∞–∫\w*",
    r"\b—Ç—É–ø(–æ–π|–∞—è|—ã–µ|–æ—Ä—ã–ª—ã–π)\b",
    r"\b–∂–æ–ø\w*",
    r"\b–ø–∏—Å—å–∫\w*",
    r"\b—á—É—à–∫–∞\w*",
    r"\b—á—É—Ö–∞–Ω\w*",
    r"\b–µ–±–∞–Ω\w*",
    r"\b–µ–±–∞–Ω–∞—à–∫\w*",
    r"\b—Å–º[–æ–∞]\b",
    r"\b–º—Ä–∞–∑—å\w*",
    r"\b–¥–µ–±–∏–ª–∫\w*",
    r"\b–¥–µ–±–∏–ª\w*",
    r"\b–¥–∏–±–∏–ª–∫\w*",
    r"\b–¥–∏–±–∏–ª\w*",
    r"\b—É—Ä–æ–¥\w*",
    r"\b—É—Ä–æ–¥–∫\w*",
    r"\b—É—Ä–æ–¥–∏–Ω\w*",
    r"\b–¥–∞—É–Ω\w*",
    r"\b–¥–æ–ª–±–æ[–µ—ë]–±\w*",
    r"\b–∫–æ–∑[–µ—ë]–ª\w*",
    r"\b–∫–∞–∑–µ–ª\w*",
    r"\b–ª–æ—Ö\w*",
    r"\b–ª–æ—à–∞—Ä\w*",
    r"\b—á–º–æ–Ω\w*",
    r"\b—á–º–æ\w*",
    r"\b–≥–æ–≤–Ω–æ–µ–¥\w*",
    r"\b–≥–æ–≤–Ω–æ–µ–¥–∫\w*",
    r"\b–≥–Ω–∏–¥\w*",
]
BAD_REGEXES = [re.compile(p, re.IGNORECASE) for p in BAD_PATTERNS]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π
violations = defaultdict(lambda: deque(maxlen=50))

@dataclass
class UserState:
    last_warn_at: float = 0.0

state = defaultdict(UserState)


# ---------- –õ–æ–≥–∏–∫–∞ ----------
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    chat = update.effective_chat
    user = update.effective_user

    if not msg or not user or not msg.text:
        return

    text = msg.text.lower()

    # --- –ó–∞–±–∞–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–ú—É—Ä–∫–∞) üê∂ ---
    for key, answers in FUNNY_REPLIES.items():
        if key in text:
            await msg.reply_text(random.choice(answers))
            return

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞ ---
    if not any(r.search(text) for r in BAD_REGEXES):
        return

    key = (chat.id, user.id)
    now = time.time()
    q = violations[key]

    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
    while q and now - q[0] > WINDOW_SECONDS:
        q.popleft()
    q.append(now)
    strikes = len(q)

    st = state[key]
    name = user.mention_html()

    admin_chat_id = os.getenv("ADMIN_LOG_CHAT_ID")

    # –õ–° (–ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
    if chat.type == ChatType.PRIVATE:
        if now - st.last_warn_at > 15:
            await msg.reply_html(f"‚ö†Ô∏è –ì–∞–≤! {name}, –Ω–µ —Ä—É–≥–∞–π—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üê∂")
            st.last_warn_at = now
        return

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    if strikes < THRESHOLD:
        if now - st.last_warn_at > 15:
            warning_text = f"‚ö†Ô∏è –ì–∞–≤-–≥–∞–≤! {name}, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ({strikes}/{THRESHOLD}) –∑–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞ üêæ"
            await msg.reply_html(warning_text)
            if admin_chat_id:
                await context.bot.send_message(
                    chat_id=admin_chat_id,
                    text=f"üëÆ –ß–∞—Ç {chat.title}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ({strikes}/{THRESHOLD}).",
                )
            st.last_warn_at = now
        return

    # –ù–∞–∫–∞–∑–∞–Ω–∏–µ (–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω)
    try:
        me = await context.bot.get_chat_member(chat.id, context.bot.id)
        if me.can_restrict_members:
            until = datetime.now(timezone.utc) + timedelta(seconds=BAN_SECONDS)
            await context.bot.ban_chat_member(
                chat.id,
                user.id,
                until_date=until,
            )
            ban_text = f"‚õî –ì–∞–≤! {name} –ø–æ–ª—É—á–∞–µ—Ç –±–∞–Ω –Ω–∞ {BAN_SECONDS} —Å–µ–∫—É–Ω–¥! üê∂"
            await msg.reply_html(ban_text)
            if admin_chat_id:
                await context.bot.send_message(
                    chat_id=admin_chat_id,
                    text=f"üö´ –ß–∞—Ç {chat.title}: {name} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {BAN_SECONDS} —Å–µ–∫—É–Ω–¥.",
                )
        else:
            funny_text = f"üòÖ {name}, —Ç–µ–±–µ –ø–æ–≤–µ–∑–ª–æ ‚Äî —É –ú—É—Ä–∫–∏ –Ω–µ—Ç –ø—Ä–∞–≤! –ù–æ –≤—Å–µ –∑–Ω–∞—é—Ç, —á—Ç–æ —Ç—ã –Ω–∞—Ä—É—à–∏—Ç–µ–ª—å üêæ"
            await msg.reply_html(funny_text)
            if admin_chat_id:
                await context.bot.send_message(
                    chat_id=admin_chat_id,
                    text=f"‚ö†Ô∏è –ß–∞—Ç {chat.title}: {name} –∏–∑–±–µ–∂–∞–ª –Ω–∞–∫–∞–∑–∞–Ω–∏—è (–Ω–µ—Ç –ø—Ä–∞–≤ —É –±–æ—Ç–∞).",
                )
        q.clear()
        st.last_warn_at = now
    except Exception as e:
        await msg.reply_html(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞–∫–∞–∑–∞—Ç—å: {e}")


# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ì–∞–≤-–≥–∞–≤! üê∂ –Ø –ú—É—Ä–∫–∞, —Å–æ–±–∞—á–∫–∞-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä!\n"
        "–Ø —Å–ª–µ–∂—É –∑–∞ —á–∞—Ç–æ–º –∏ –≥–∞–≤–∫–∞—é –Ω–∞ —Ç–µ—Ö, –∫—Ç–æ —Ä—É–≥–∞–µ—Ç—Å—è.\n"
        f"–ü–æ—Å–ª–µ {THRESHOLD} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π ‚Äî –±–∞–Ω –Ω–∞ {BAN_SECONDS} —Å–µ–∫—É–Ω–¥.\n"
        "–ê –µ—â—ë —è –ª—é–±–ª—é –≥—É–ª—è—Ç—å, –∏–≥—Ä–∞—Ç—å –∏ –≤–∫—É—Å–Ω—è—à–∫–∏ üêæ"
    )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ú—É—Ä–∫–∏:\n"
        f"- –ü–æ—Ä–æ–≥: {THRESHOLD} –Ω–∞—Ä—É—à–µ–Ω–∏–π –∑–∞ {WINDOW_SECONDS} —Å–µ–∫—É–Ω–¥\n"
        f"- –ë–∞–Ω: {BAN_SECONDS} —Å–µ–∫—É–Ω–¥\n"
        "üê∂ –ú—É—Ä–∫–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–∂–µ!"
    )


# ---------- –ó–∞–ø—É—Å–∫ ----------
def main():
    load_dotenv()
    token = os.getenv("BOT_TOKEN")
    port = int(os.getenv("PORT", 8443))
    webhook_url = os.getenv("WEBHOOK_URL")

    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path="webhook",
        webhook_url=f"{webhook_url}/webhook",
    )


if __name__ == "__main__":
    main()