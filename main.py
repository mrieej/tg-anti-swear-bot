import logging
import os
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")
webhook_url = os.getenv("WEBHOOK_URL")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ú—É—Ä–∫–∞ –∑–¥–µ—Å—å üê∂‚ù§Ô∏è")

# –¢–≤–æ–π —Ö—ç–Ω–¥–ª–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∏—á–µ–≥–æ –Ω–µ —É–±–∏—Ä–∞–ª)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if "–º—É—Ä–∫–∞" in text and "–∫–∞–∫ –¥–µ–ª–∞" in text:
        await update.message.reply_text("–£ –ú—É—Ä–∫–∏ –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! üêæ")
    elif "–≥—É–ª—è—Ç—å" in text:
        await update.message.reply_text("–ì—É–ª—è—Ç—å? –£—Ä–∞! üêïüéâ")
    elif "–º—è—á" in text:
        await update.message.reply_text("‚öΩ –õ–æ–≤–∏ –º—è—á–∏–∫!")
    else:
        await update.message.reply_text("–ú—É—Ä–∫–∞ —Å–ª—É—à–∞–µ—Ç —Ç–µ–±—è üëÇüê∂")

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))

    # –°–æ–æ–±—â–µ–Ω–∏—è
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ
    async def setup(app):
        await app.bot.delete_webhook(drop_pending_updates=True)
        await app.bot.set_webhook(f"{webhook_url}/webhook")
    app.post_init = setup

    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8443)),
        url_path="webhook",
        webhook_url=f"{webhook_url}/webhook",
    )

if __name__ == "__main__":
    main()