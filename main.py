import os
import re
import time
import random
import logging
from datetime import datetime, timedelta, timezone
from collections import defaultdict, deque
from dataclasses import dataclass

from dotenv import load_dotenv
from telegram import Update, ChatPermissions
from telegram.constants import ChatType
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CommandHandler,
    filters,
)

# ------------ –õ–û–ì–ò ------------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("anti_swear_bot")

# ------------ –ù–ê–°–¢–†–û–ô–ö–ò ------------
WINDOW_SECONDS = 60     # –æ–∫–Ω–æ –ø–æ–¥—Å—á—ë—Ç–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π (—Å–µ–∫)
THRESHOLD = 3           # —Å–∫–æ–ª—å–∫–æ –º–∞—Ç–æ–≤ –∑–∞ –æ–∫–Ω–æ –¥–æ –º—É—Ç–∞
MUTE_SECONDS = 30       # –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞ (—Å–µ–∫)
FUN_COOLDOWN = 6        # —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ —Ñ–ª—É–¥–∏–ª ¬´—Ñ–∏—à–∫–∞–º–∏¬ª (—Å–µ–∫)

# –°–ø–∏—Å–æ–∫ –º–∞—Ç–æ–≤ (—Ä–µ–≥—É–ª—è—Ä–∫–∏)
MAT_PATTERNS = [
    r"\b—Ö[—Éy][–π–∏–µ—è—ë]\w*",
    r"\b–ø[–∏–µ]–∑–¥[–∞—ã–æ]*\w*",
    r"\b[–µ—ë]–±\w*",
    r"\b–±–ª[—è–µ]–¥[—å–π]*\w*",
    r"\b—Å—É–∫[–∞–∏–æ]*\w*",
    r"\b–º—É–¥[–∞–æ]–∫\w*",
    r"\b–ø–∏–¥[–æa]—Ä\w*",
]
MAT_REGEXES = [re.compile(p, re.IGNORECASE) for p in MAT_PATTERNS]

# –¢—Ä–∏–≥–≥–µ—Ä—ã ¬´—Ñ–∏—à–µ–∫¬ª
RX = lambda p: re.compile(p, re.IGNORECASE)
TRIGGERS = {
    "bot": [
        RX(r"\b–±–æ—Ç\b"),
    ],
    "hello": [
        RX(r"\b–ø—Ä–∏–≤(–µ—Ç|–∫–∏)?\b"),
        RX(r"\b–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π(—Ç–µ)?\b"),
        RX(r"\b—Å–∞–ª—é—Ç\b"),
        RX(r"\b–∫—É\b"),
    ],
    "thanks": [
        RX(r"\b—Å–ø–∞—Å–∏–±(–æ|–∫–∏)\b"),
        RX(r"\b–±–ª–∞–≥–æ–¥–∞—Ä(?:—é|—Å—Ç–≤—É—é)\b"),
        RX(r"\b–º–µ—Ä—Å–∏\b"),
    ],
    "laugh": [
        RX(r"\b(–∞—Ö{1,}–∞+|—Ö–∞—Ö–∞|–ª–æ–ª|–∫–µ–∫|xd)\b"),
    ],
    "morning": [
        RX(r"\b–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ\b"),
    ],
    "night": [
        RX(r"\b—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏\b"),
        RX(r"\b–¥–æ–±—Ä–æ–π –Ω–æ—á–∏\b"),
        RX(r"\b—Å–ø–æ–∫–∏(–Ω—á)?\b"),
    ],
    "birthday": [
        RX(r"—Å –¥–Ω(–µ|—ë)–º —Ä–æ–∂–¥"),
        RX(r"\b–¥–Ω—é—Ö"),
    ],
    "who": [
        RX(r"–∫—Ç–æ —Ç—ã"),
        RX(r"—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å"),
    ],
}

REPLIES = {
    "bot": ["–î–∞-–¥–∞, —è —Ç—É—Ç ü§ñ", "–ù–∞ —Å–≤—è–∑–∏! üéß", "–°–ª—É—à–∞—é, —á–µ–º –ø–æ–º–æ—á—å?"],
    "hello": ["–ü—Ä–∏–≤–µ—Ç! üëã", "–°–∞–ª—é—Ç! ‚úåÔ∏è", "–ô–æ—É! üôå"],
    "thanks": ["–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôå", "–ù–µ –∑–∞ —á—Ç–æ üòâ", "–û–±—Ä–∞—â–∞–π—Å—è!"],
    "laugh": ["–∞—Ö–∞—Ö, –æ—Ä—É üòÇ", "–∫–µ–∫ üòπ", "—Ç–∞ –∂–µ —Ä–µ–∞–∫—Ü–∏—è üòÜ"],
    "morning": ["–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è", "–ë–æ–¥—Ä–æ–≥–æ —É—Ç—Ä–∞! üåÖ", "–ü–æ—Ä–∞ –ø–æ–∫–æ—Ä—è—Ç—å –º–∏—Ä ü¶æ"],
    "night": ["–°–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤ üåô", "–ù–µ–∂–Ω–æ–π –Ω–æ—á–∏ ‚ú®", "–û—Ç–¥—ã—Ö–∞–π, –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –ª—É—á—à–µ üò¥"],
    "birthday": ["–° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéÇüéâ", "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—Å–µ—Ö –±–ª–∞–≥! ü•≥"],
    "who": ["–Ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä: —É–¥–∞–ª—è—é –º–∞—Ç—ã –∏ –º–æ–≥—É –∑–∞–º—É—Ç–∏—Ç—å –Ω–∞ 30—Å. –ï—â—ë —É–º–µ—é –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—Ç–∞—Ç—å üòâ"],
}

# ------------ –°–û–°–¢–û–Ø–ù–ò–ï ------------
violations = defaultdict(lambda: deque(maxlen=50))

@dataclass
class UserState:
    last_warn_at: float = 0.0
    last_fun_at: float = 0.0

state = defaultdict(UserState)
fun_enabled = defaultdict(lambda: True)  # –º–æ–∂–Ω–æ –≤—ã–∫–ª—é—á–∞—Ç—å /fun_off

# ------------ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ------------
def find_trigger(text: str) -> str | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á —Ç—Ä–∏–≥–≥–µ—Ä–∞, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–æ–≤–ø–∞–ª–æ."""
    for name, patterns in TRIGGERS.items():
        if any(p.search(text) for p in patterns):
            return name
    return None

async def maybe_fun_reply(update: Update, text: str, st: UserState):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ¬´—Ñ–∏—à–µ—á–Ω—ã–π¬ª –æ—Ç–≤–µ—Ç (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∏ –Ω–µ —Ñ–ª—É–¥–∏–º)."""
    chat = update.effective_chat
    msg = update.effective_message

    if not fun_enabled[chat.id]:
        return

    now = time.time()
    if now - st.last_fun_at < FUN_COOLDOWN:
        return

    trig = find_trigger(text)
    if not trig:
        return

    # –ß—É—Ç—å —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–±–∞—Ä—â–∏–≤–∞–ª –≤ –≥—Ä—É–ø–ø–∞—Ö
    must_reply = (chat.type == ChatType.PRIVATE) or (trig in {"bot", "birthday"})
    if not must_reply and random.random() < 0.35:  # ~35% —à–∞–Ω—Å
        return

    st.last_fun_at = now
    await msg.reply_text(random.choice(REPLIES[trig]))

# ------------ –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ------------
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    chat = update.effective_chat
    user = update.effective_user

    if not msg or not user or not msg.text:
        return

    text = msg.text.lower().strip()
    log.info("MSG chat=%s user=%s: %s", chat.id, user.id, text)

    # --- 1) –ú–æ–¥–µ—Ä–∞—Ü–∏—è –º–∞—Ç–æ–≤ ---
    if any(r.search(text) for r in MAT_REGEXES):
        key = (chat.id, user.id)
        now = time.time()
        q = violations[key]
        while q and now - q[0] > WINDOW_SECONDS:
            q.popleft()
        q.append(now)
        strikes = len(q)

        st = state[key]
        name = user.mention_html()

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await msg.delete()
        except Exception as e:
            log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", e)

        # –ï—Å–ª–∏ —ç—Ç–æ –õ–° ‚Äî –ø—Ä–æ—Å—Ç–æ –º—è–≥–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
        if chat.type == ChatType.PRIVATE:
            if now - st.last_warn_at > 15:
                await msg.reply_html(f"‚ö†Ô∏è {name}, –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ —Å –ª–µ–∫—Å–∏–∫–æ–π.")
                st.last_warn_at = now
            return

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        if strikes < THRESHOLD:
            if now - st.last_warn_at > 15:
                await msg.reply_html(
                    f"‚ö†Ô∏è {name}, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ –º–∞—Ç ({strikes}/{THRESHOLD})."
                )
                st.last_warn_at = now
            return

        # –ú—É—Ç
        try:
            until = datetime.now(timezone.utc) + timedelta(seconds=MUTE_SECONDS)
            perms = ChatPermissions(can_send_messages=False)
            await context.bot.restrict_chat_member(
                chat.id,
                user.id,
                permissions=perms,
                until_date=until,
            )
            await msg.reply_html(f"‚õî {name} –∑–∞–º—É—á–µ–Ω –Ω–∞ {MUTE_SECONDS}—Å –∑–∞ –º–∞—Ç—ã!")
            q.clear()
            st.last_warn_at = now
        except Exception as e:
            await msg.reply_html(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–∞—Ü–∏–∏: {e}")
        return

    # --- 2) ¬´–§–∏—à–∫–∏¬ª (–µ—Å–ª–∏ –º–∞—Ç–æ–≤ –Ω–µ—Ç) ---
    st = state[(chat.id, user.id)]
    await maybe_fun_reply(update, text, st)

# ------------ –ö–û–ú–ê–ù–î–´ ------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä.\n"
        f"–£–¥–∞–ª—è—é –º–∞—Ç—ã –∏ –º–æ–≥—É –∑–∞–º—É—Ç–∏—Ç—å –Ω–∞ {MUTE_SECONDS} —Å–µ–∫—É–Ω–¥.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /status /ping /fun_on /fun_off\n"
        "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å ¬´–±–æ—Ç¬ª, ¬´–ø—Ä–∏–≤–µ—Ç¬ª, ¬´—Å–ø–∞—Å–∏–±–æ¬ª, ¬´–∫–µ–∫¬ª, ¬´—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏¬ª üòâ"
    )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await update.message.reply_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"- –ü–æ—Ä–æ–≥: {THRESHOLD} –º–∞—Ç–∞ –∑–∞ {WINDOW_SECONDS} —Å–µ–∫\n"
        f"- –ú—É—Ç: {MUTE_SECONDS} —Å–µ–∫\n"
        f"- –§–∏—à–∫–∏: {'–≤–∫–ª—é—á–µ–Ω—ã' if fun_enabled[chat_id] else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}"
    )

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –Ø –∂–∏–≤–æ–π –∏ —Ä–∞–±–æ—Ç–∞—é!")

async def fun_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    fun_enabled[chat_id] = True
    await update.message.reply_text("üéâ –§–∏—à–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã!")

async def fun_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    fun_enabled[chat_id] = False
    await update.message.reply_text("ü§´ –§–∏—à–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã.")

# ------------ –ó–ê–ü–£–°–ö ------------
def main():
    load_dotenv()
    token = os.getenv("BOT_TOKEN")
    port = int(os.getenv("PORT", 8443))
    webhook_url = os.getenv("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://tg-anti-swear-bot.onrender.com (–±–µ–∑ —Å–ª–µ—à–∞ –Ω–∞ –∫–æ–Ω—Ü–µ)

    if not token or not webhook_url:
        raise RuntimeError("BOT_TOKEN –∏ WEBHOOK_URL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(CommandHandler("fun_on", fun_on))
    app.add_handler(CommandHandler("fun_off", fun_off))
    app.add_handler(MessageHandler(filters.TEXT, handle_text))

    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path="webhook",
        webhook_url=f"{webhook_url}/webhook",
    )

if __name__ == "__main__":
    main()